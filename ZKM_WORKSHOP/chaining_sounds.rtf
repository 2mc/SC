{\rtf1\ansi\ansicpg1252\cocoartf1038\cocoasubrtf350
{\fonttbl\f0\fnil\fcharset0 Monaco;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;\red0\green0\blue191;\red191\green0\blue0;
}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\f0\fs30 \cf2 \
\cf3 Chaining\cf2  a series of control, source or effects processes. \
\
\cf4 /* Create a function that stops the previous source, \
	and stores a new source in its place.\
	Use environment variable ~source for this\
*/\cf2 \
\
f = \{ \cf3 | playfunc |\cf2 \
	~source.free;\
	~source = playfunc.play;\
\};\
\
\cf4 // Test the sound chaining function with different sound functions\cf2 \
\
\cf4 // 1. Initial source: \cf2 \
~source = \{ \cf3 Blip\cf2 .ar(440, 5, 0.1) \}.play;\
\
\cf4 // 2. Substitute a new source using the substitution function: \cf2 \
f.value(\{ \cf3 SinOsc\cf2 .ar(440, 5, \cf3 EnvGen\cf2 .kr(\cf3 Env\cf2 .perc(0.01, 0.5, 0.1))) \});\
\
\cf4 // A shorthand for f.value(...) is: f.(...)\cf2 \
f.value(\{ \cf3 LFSaw\cf2 .ar(440, 0, \cf3 EnvGen\cf2 .kr(\cf3 Env\cf2 .perc(0.05, 2.5, 0.1))) \});\
\
\cf4 // A function that creates a routine to chaining various sources: \cf2 \
\
f = \{ \cf3 | sounds |\cf2 \
	\cf3 var\cf2  player, source;\
	player = \{ \cf3 | playfunc |\cf2 \
		source.free;\
		source = playfunc.play;\
	\};\
	\{	\cf4 // iterate over the collection of sounds:\cf2 \
		\cf4 // .flat flattens the array, in case it is nested \cf2 \
		sounds.flat do: \{ \cf3 | soundfunc |\cf2 \
			player.(soundfunc);\
			0.1.wait;			\cf4 // wait 0.1 seconds before starting the next sound\cf2 \
		\};\
		source.free;			\cf4 // stop the last sound after the end\cf2 \
	\}.fork;	\
\};\
\
\cf4 // Run the function with some sounds: \cf2 \
f.([\
	\{ \cf3 LFSaw\cf2 .ar(440, 0, \cf3 EnvGen\cf2 .kr(\cf3 Env\cf2 .perc(0.05, 2.5, 0.1))) \},\
	\{ \cf3 Blip\cf2 .ar(440, 5, 0.1) \},\
	\{ \cf3 SinOsc\cf2 .ar(440, 5, \cf3 EnvGen\cf2 .kr(\cf3 Env\cf2 .perc(0.01, 0.5, 0.1))) \},\
	\{ \cf3 Klank\cf2 .ar(`[[200, 671, 1153, 1723], \cf3 nil\cf2 , [1, 1, 1, 1]], \
			\cf3 PinkNoise\cf2 .ar([0.007,0.007])) \};\
]);\
\
\cf4 // use .dup or ! to create copies of an object\cf2 \
f.([\
	\{\{ \cf3 LFSaw\cf2 .ar(440 + 1000.rand, 0, \cf3 EnvGen\cf2 .kr(\cf3 Env\cf2 .perc(0.05, 0.5, 0.1))) \}\}.dup(30),\
	\{\{ \cf3 Blip\cf2 .ar(440 + 1000.rand, 2 + 15.rand, 0.1) \}\} ! 50,\
	\{ \cf3 SinOsc\cf2 .ar(440, 5, \cf3 EnvGen\cf2 .kr(\cf3 Env\cf2 .perc(0.01, 0.5, 0.1))) \},\
	\{\{ \cf3 Klank\cf2 .ar(`[\cf3 Array\cf2 .rand(10, 400, 4000)], \
			\cf3 PinkNoise\cf2 .ar([0.007,0.007]))\
			* \cf3 EnvGen\cf2 .kr(\cf3 Env\cf2 .perc(0.05 rrand: 1, 0.1 rrand: 1.5, 0.3)) \}\} ! 100;\
]);\
\
\cf4 // Add parameter to control the duration of each sound\cf2 \
f = \{ \cf3 | sounds |\cf2 \
	\cf3 var\cf2  player, source;\
	player = \{ \cf3 | duration, sound |\cf2 \
		source.free;\
		source = sound.play;\
		duration.value.wait;	\cf4 // duration may be a function\cf2 \
	\};\
	\{	\cf4 // iterate over the collection of sounds:\cf2 \
		\cf4 // .flat flattens the array, in case it is nested \cf2 \
		sounds.flat pairsDo: \{ \cf3 | duration, sound |\cf2  \cf4 // iterate over pairs \cf2 \
			player.(duration, sound); \cf4 // \cf2 \
		\};\
		source.free;			\cf4 // stop the last sound after the end\cf2 \
	\}.fork;	\
\};\
\
f.([\
	[0.2, \
		\{ \cf3 LFSaw\cf2 .ar(440 + 1000.rand, 0, \cf3 EnvGen\cf2 .kr(\cf3 Env\cf2 .perc(0.05, 0.5, 0.1))) \}]\
	.dup(5),\
	\{[0.1, \{ \cf3 Blip\cf2 .ar(440 + 1000.rand, 2 + 15.rand, 0.1) \}]\} ! 15,\
	[2, \{ \cf3 SinOsc\cf2 .ar(440, 5, \cf3 EnvGen\cf2 .kr(\cf3 Env\cf2 .perc(0.01, 0.5, 0.1))) \}],\
	\{[\{ 0.1 exprand: 10\}, \{ \cf3 Klank\cf2 .ar(`[\cf3 Array\cf2 .rand(10, 400, 4000)], \
			\cf3 PinkNoise\cf2 .ar([0.007,0.007]))\
			* \cf3 EnvGen\cf2 .kr(\cf3 Env\cf2 .perc(0.05 rrand: 1, 0.1 rrand: 1.5, 0.1)) \}]\
	\} ! 10;\
]);\
\
\cf4 // Run f many times at once: Polyphony !\cf2 \
\
\{ f.([\
	[0.2, \
		\{ \cf3 LFSaw\cf2 .ar(440 + 1000.rand, 0, \cf3 EnvGen\cf2 .kr(\cf3 Env\cf2 .perc(0.05, 0.5, 0.1))) \}]\
	.dup(5),\
	\{[0.1, \{ \cf3 Blip\cf2 .ar(440 + 1000.rand, 2 + 15.rand, 0.1) \}]\} ! 15,\
	[2, \{ \cf3 SinOsc\cf2 .ar(440, 5, \cf3 EnvGen\cf2 .kr(\cf3 Env\cf2 .perc(0.01, 0.5, 0.1))) \}],\
	\{[\{ 0.1 exprand: 10\}, \{ \cf3 Klank\cf2 .ar(`[\cf3 Array\cf2 .rand(10, 400, 4000)], \
			\cf3 PinkNoise\cf2 .ar([0.007,0.007]))\
			* \cf3 EnvGen\cf2 .kr(\cf3 Env\cf2 .perc(0.05 rrand: 1, 0.1 rrand: 1.5, 0.1)) \}]\
	\} ! 10;\
]) \} ! 8;\
\
\cf4 // A variant of the above, adding a steady beat accompaniment\cf2 \
( \
([\
	[0.2, \
		\{ \cf3 LFSaw\cf2 .ar(440 + 1000.rand, 0, \cf3 EnvGen\cf2 .kr(\cf3 Env\cf2 .perc(0.05, 0.5, 0.1))) \}]\
	.dup(5),\
	\{[0.1, \{ \cf3 Blip\cf2 .ar(440 + 1000.rand, 2 + 15.rand, 0.1) \}]\} ! 15,\
	[2, \{ \cf3 SinOsc\cf2 .ar(440, 5, \cf3 EnvGen\cf2 .kr(\cf3 Env\cf2 .perc(0.01, 0.5, 0.1))) \}],\
	\{[\{ 0.1 exprand: 10\}, \{ \cf3 Klank\cf2 .ar(`[\cf3 Array\cf2 .rand(10, 400, 4000)], \
			\cf3 PinkNoise\cf2 .ar([0.007,0.007]))\
			* \cf3 EnvGen\cf2 .kr(\cf3 Env\cf2 .perc(0.05 rrand: 1, 0.1 rrand: 1.5, 0.1)) \}]\
	\} ! 10;\
] ! 8).add(\
	[\{ [0.1, 0.2, 0.4].choose \}, \
		\{ \cf3 Out\cf2 .ar(1, \cf3 WhiteNoise\cf2 .ar(\cf3 EnvGen\cf2 .kr(\cf3 Env\cf2 .perc(0.01, 0.08, 0.05 rrand: 0.3))))\
	\}] ! 150\
) do: f.(\cf3 _\cf2 );\
)\
\
\cf4 // Finally, scramble the order of events in each voice: \cf2 \
( \
(\{ [\
	[0.2, \
		\{ \cf3 LFSaw\cf2 .ar(440 + 1000.rand, 0, \cf3 EnvGen\cf2 .kr(\cf3 Env\cf2 .perc(0.05, 0.5, 0.1))) \}]\
	.dup(5),\
	\{[0.1, \{ \cf3 Blip\cf2 .ar(440 + 1000.rand, 2 + 15.rand, 0.1) \}]\} ! 15,\
	[2, \{ \cf3 SinOsc\cf2 .ar(440, 5, \cf3 EnvGen\cf2 .kr(\cf3 Env\cf2 .perc(0.01, 0.5, 0.1))) \}],\
	\{[\{ 0.1 exprand: 10\}, \{ \cf3 Klank\cf2 .ar(`[\cf3 Array\cf2 .rand(10, 400, 4000)], \
			\cf3 PinkNoise\cf2 .ar([0.007,0.007]))\
			* \cf3 EnvGen\cf2 .kr(\cf3 Env\cf2 .perc(0.05 rrand: 1, 0.1 rrand: 1.5, 0.1)) \}]\
	\} ! 10;\
].scramble \} ! 8).scramble.add(\
	[\{ [0.1, 0.2, 0.4].choose \}, \
		\{ \cf3 Out\cf2 .ar(1, \cf3 WhiteNoise\cf2 .ar(\cf3 EnvGen\cf2 .kr(\cf3 Env\cf2 .perc(0.01, 0.08, 0.05 rrand: 0.3))))\
	\}] ! 150\
) do: f.(\cf3 _\cf2 );\
)\
\
\
\
\
}