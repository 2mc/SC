{\rtf1\ansi\ansicpg1252\cocoartf1038\cocoasubrtf350
{\fonttbl\f0\fnil\fcharset0 Monaco;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue191;\red96\green96\blue96;\red191\green0\blue0;
\red0\green115\blue0;}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\f0\fs18 \cf0 if (\cf2 this\cf0 .isLog(2)) \{ (\cf3 "\\n\\n"\cf0  + \cf2 thisProcess\cf0 .nowExecutingPath.basename + \cf3 "\\n"\cf0 ).postln; \};\
\cf4 /*\
DrawDef.all.keys\
*/\cf0 \
\
(\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural
\cf2 DrawDef\cf0 (\cf5 \\scaledTest\cf0 , \cf5 \\scaled\cf0 , \cf2 nil\cf0 \
	, \{\{\cf2 |e, isPost, outline|\cf0  if(isPost && outline) \{ \
		\cf2 Pen\cf0 .use\{ \
			\cf2 Color\cf0 .yellow.set; \cf2 Pen\cf0 .width = 2; \cf2 Pen\cf0 .strokeRect( e.scaledView.drawBounds.insetBy(4) ); \
			\
			e.testPenW = 3; \cf4 // change this to see results\cf0 \
			e.testRect = \cf2 Rect\cf0 (450, 250, 200, 200);\
			e.testLP1 = 460@260; e.testLP2 = 460@280;\
			e.testPoint = 470@260; \
			e.pointRect = \cf2 Rect\cf0 .fromPoints(e.testPoint, e.testPoint).extent_((e.testPenW-1).asPoint);\
			\cf2 Pen\cf0 .width = e.testPenW; \
			\cf2 Pen\cf0 .strokeRect(e.testRect);\
			\cf2 Pen\cf0 .line(e.testLP1, e.testLP2); \cf2 Pen\cf0 .stroke;\
			\cf2 Pen\cf0 .strokeRect(e.pointRect);\
			\
	\}\}\}\})\
);\
\
(\
\cf2 DrawDef\cf0 (\cf5 \\movedTest\cf0 , \cf5 \\moved\cf0 , \cf2 nil\cf0 \
	, \{\{\cf2 |e, isPost, outline, testPenW, testRect, testLP1, testLP2, testPoint, pointRect, scaledView,\
		trans|\cf0  \
		if(isPost && outline) \{ \cf2 Pen\cf0 .use\{ \
			\cf2 var\cf0  rectTS, pointTS, pointRectTS, testLP1TS, testLP2TS, testLP1fwd, testLP2fwd;\
			\
			\cf2 Color\cf0 .white.set; \cf2 Pen\cf0 .width = 2; \cf2 Pen\cf0 .strokeRect( e.scaledView.canvasBounds.insetBy(2) );\
			\cf2 Color\cf0 .red.set; \cf2 Pen\cf0 .width = 2; \cf2 Pen\cf0 .strokeRect( e.scaledView.totalBounds.insetBy(0) );\
			\
			rectTS = scaledView.transScale(testRect);\
			testLP1TS = scaledView.transScale(testLP1);\
			testLP2TS = scaledView.transScale(testLP2);\
			testLP1fwd = scaledView.convertFwd(*testLP1.asArray).asPoint;\
			testLP2fwd = scaledView.convertFwd(*testLP2.asArray).asPoint;\
			pointTS = scaledView.transScale(testPoint);\
			\cf4 //pointRectTS = Rect.fromPoints(pointTS, pointTS).extent_((testPenW - 1).asPoint);\cf0 \
			pointRectTS = scaledView.transScale(pointRect);\
			\cf2 Pen\cf0 .width = testPenW; \
			\cf2 Color\cf0 .red.setStroke; \cf2 Pen\cf0 .strokeRect(rectTS);\
				\cf2 Pen\cf0 .line(testLP1TS, testLP2TS); \cf2 Pen\cf0 .stroke;\
			\cf4 // either above or below:\cf0 \
				\cf4 // Pen.use\{ Pen.translate(*trans); Pen.line(testLP1fwd, testLP2fwd); Pen.stroke \};\cf0 \
			\cf2 Pen\cf0 .strokeRect(pointRectTS);\
			\
	\}\}\}\})\
);\
\
(\
\cf2 DrawDef\cf0 (\cf5 \\drawTest\cf0 , \cf5 \\draw\cf0 , \cf2 nil\cf0 \
	, \{\{\cf2 |e, isPost, outline, testPenW, testRect, testLP1, testLP2, testPoint, pointRect, scaledView,\
		trans|\cf0  \
		if(isPost && outline) \{ \cf2 Pen\cf0 .use\{ \
			\cf2 var\cf0  rectTS, pointTS, pointRectTS, testLP1TS, testLP2TS;\
			rectTS = scaledView.transScale(testRect);\
			testLP1TS = scaledView.transScale(testLP1);\
			testLP2TS = scaledView.transScale(testLP2);\
			pointTS = scaledView.transScale(testPoint);\
			pointRectTS = scaledView.transScale(pointRect);\
			\cf2 Pen\cf0 .translate( *trans * -1 );\
			\cf2 Pen\cf0 .width = 1;\
			\cf2 Color\cf0 .blue.setStroke; \cf2 Pen\cf0 .strokeRect(scaledView.scaledOutline(testRect, testPenW));			\cf2 Color\cf0 .green.setStroke; \cf2 Pen\cf0 .strokeRect(scaledView.scaledInline(testRect, testPenW));\
			\cf2 Color\cf0 .white.setStroke; \cf2 Pen\cf0 .strokeRect(rectTS);\
			\
			\cf2 Color\cf0 .blue.setStroke; \cf2 Pen\cf0 .strokeRect(scaledView.scaledLineRect(\
				testLP1, testLP2, testPenW));\
			\cf2 Color\cf0 .white.setStroke; \cf2 Pen\cf0 .line(testLP1TS, testLP2TS); \cf2 Pen\cf0 .stroke;\
						\
			\cf2 Color\cf0 .blue.setStroke; \cf2 Pen\cf0 .strokeRect(scaledView.scaledOutline(pointRect, testPenW));			\cf2 Color\cf0 .green.setStroke; \cf2 Pen\cf0 .strokeRect(scaledView.scaledInline(pointRect, testPenW));\
			\cf2 Color\cf0 .white.setStroke; \cf2 Pen\cf0 .strokeRect(pointRectTS);\
	\}\}\}\})\
);\
\
(\
\cf2 DrawDef\cf0 (\cf5 \\freeTest\cf0 , \cf5 \\draw\cf0 , \cf2 nil\cf0 \
	, \{\cf2 |node|\cf0 \
		\{\cf2 |e, isPost|\cf0  			\
	\}\}\
	, \{\cf2 |node|\cf0  \cf4 // this.logln("proto free:" + node); \cf0 \
		\{\cf2 |e, isPost|\cf0  \cf4 // this.logln("free:" + e); 			\cf0 \
	\}\})\
);\
}