{\rtf1\ansi\ansicpg1252\cocoartf1038\cocoasubrtf350
{\fonttbl\f0\fnil\fcharset0 Monaco;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;\red0\green0\blue191;\red0\green115\blue0;
\red96\green96\blue96;\red191\green0\blue0;}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\f0\fs18 \cf2 (\
\cf3 DrawDef\cf2 (\cf4 \\SYSTab_RefLinesBefore\cf2 ,\
	\{\cf3 |node|\cf2 \
		\cf3 var\cf2  refFontExt, pE = node.tree.server.drawEnvir.parent;\
		pE.refFontExt = refFontExt = \cf5 "Freq: 12342.4 "\cf2 .bounds(pE.refFont).extent;\
		\{\cf3 |e, refMode, refXOff, refXGab, refYGab, refScaleY|\cf2 \
			if (refMode > 0) \{ \
				e.refXOff = refFontExt.x + refXGab + refXOff;\
				e.offX = e.offX + e.refXOff;\
				if( refMode > 1) \{ e.yAddTop = e.yAddTop + (refYGab + refFontExt.y) * refScaleY \}\
			\};\
	\}\}\
	,\{\cf3 |node|\cf2 \
\cf6 //		var freqFunc = \{|midi| ("Freq:" + midi.midicps.round(0.1)) \};\cf2 \
\cf6 //		var midiFunc = \{|midi| ("Midi:" + midi.round(0.01)) \};\cf2 \
		\cf3 var\cf2  colorFunc, gridFunc;\
		\{\cf3 |e, refMode, refXGab, refYGab, refFontExt, refFont, refColor, refBackColor, drawSys0,\
			drawWidth, midiRef, midiScale, quantColors, quantModes, quantMode, midiMin, midiMax,\
			drawHeight, trans, scale, scaleDelta, scaledView|\cf2 \
			if(refMode > 0) \{\
				colorFunc= \{\cf3 |n|\cf2  quantColors[quantMode - (n.gcd( (2 ** quantMode).asInt ).log2)] \};\
				gridFunc = \{\cf6 // |strFunc|\cf2 \
					\cf3 var\cf2  maxSteps = midiMax.div(quantModes[quantMode]) + 1;\
					\cf3 var\cf2  minSteps = midiMin.div(quantModes[quantMode]) * -1;\
					\cf3 var\cf2  posSteps = \cf3 Array\cf2 .series(maxSteps, 0, quantModes[quantMode])\
						.drop(1);\
					\cf3 var\cf2  negSteps = \cf3 Array\cf2 .series(minSteps, 0, quantModes[quantMode] * -1)\
						.drop(1);\
					[posSteps, negSteps].do\{\cf3 |steps|\cf2  steps.do\{\cf3 |step, i|\cf2  \
						\cf3 var\cf2  dY = step * midiScale * scale[1];\
						\cf3 var\cf2  color = colorFunc.value(i+1).setStroke;\
						\cf3 Pen\cf2 .line(0@(drawSys0-dY) , drawWidth@(drawSys0-dY)); \cf3 Pen\cf2 .stroke;\
\cf6 //						strFunc.value(midiRef + step).drawAtPoint(\cf2 \
\cf6 //							refXGab@(drawSys0 - refFontExt.y - refYGab - dY), refFont, color);\cf2 \
					\}\};\
				\};\
				\
\cf6 //				Pen.use\{ Pen.translate(*trans); refBackColor.setFill; \cf2 \
\cf6 //					Pen.fillRect( Rect.fromPoints(0@0, e.refXOff@drawHeight) );\cf2 \
\cf6 //					//("mode:" + refMode).drawAtPoint(refXGab@refYGab, refFont, refColor);\cf2 \
\cf6 //				\};\cf2 \
				\
				\cf3 Pen\cf2 .use\{ \cf3 Pen\cf2 .translate(trans[0], scaleDelta[1]);\
					\cf3 Pen\cf2 .width = 1; \
					refColor.set; \cf3 Pen\cf2 .line(0@drawSys0, drawWidth@drawSys0); \cf3 Pen\cf2 .stroke;\
					refMode.switch(\
					1, \{\
\cf6 //						freqFunc.value(midiRef)\cf2 \
\cf6 //						.drawAtPoint(refXGab\cf2 \
\cf6 //							@(drawSys0 - refFontExt.y - refYGab-2), refFont, refColor);\cf2 \
\cf6 //						midiFunc.value(midiRef)\cf2 \
\cf6 //						.drawAtPoint(refXGab\cf2 \
\cf6 //							@(drawSys0 + refYGab+2), refFont, refColor) \cf2 \
					\}\
					,2, \{	\
\cf6 //						freqFunc.value(midiRef)\cf2 \
\cf6 //						.drawAtPoint(refXGab\cf2 \
\cf6 //							@(drawSys0 - refFontExt.y - refYGab), refFont, refColor);\cf2 \
\cf6 //						gridFunc.value(freqFunc)\cf2 \
						gridFunc.value \
					\}\
					,3, \{	\
\cf6 //						midiFunc.value(midiRef)\cf2 \
\cf6 //						.drawAtPoint(refXGab\cf2 \
\cf6 //							@(drawSys0 - refFontExt.y - refYGab), refFont, refColor);\cf2 \
\cf6 //						gridFunc.value(midiFunc)\cf2 \
						gridFunc.value  \
					\});\
				\}\
			\}\
	\}\})\
);\
\
(\
\cf3 DrawDef\cf2 (\cf4 \\SYSTab_RefLinesAfter\cf2 , \cf3 nil\cf2 ,\
	\{\cf3 |node|\cf2 \
		\cf3 var\cf2  freqFunc = \{\cf3 |midi|\cf2  (\cf5 "Freq:"\cf2  + midi.midicps.round(0.1)) \};\
		\cf3 var\cf2  midiFunc = \{\cf3 |midi|\cf2  (\cf5 "Midi:"\cf2  + midi.round(0.01)) \};\
		\cf3 var\cf2  colorFunc, gridFunc;\
		\{\cf3 |e, refMode, refXGab, refYGab, refFontExt, refFont, refColor, refBackColor, drawSys0,\
			drawWidth, midiRef, midiScale, quantColors, quantModes, quantMode, midiMin, midiMax,\
			drawHeight, trans, scale, scaleDelta, scaledView|\cf2 \
			if(refMode > 0) \{\
				colorFunc= \{\cf3 |n|\cf2  quantColors[quantMode - (n.gcd( (2 ** quantMode).asInt ).log2)] \};\
				gridFunc = \{\cf3 |strFunc|\cf2 \
					\cf3 var\cf2  maxSteps = midiMax.div(quantModes[quantMode]) + 1;\
					\cf3 var\cf2  minSteps = midiMin.div(quantModes[quantMode]) * -1;\
					\cf3 var\cf2  posSteps = \cf3 Array\cf2 .series(maxSteps, 0, quantModes[quantMode])\
						.drop(1);\
					\cf3 var\cf2  negSteps = \cf3 Array\cf2 .series(minSteps, 0, quantModes[quantMode] * -1)\
						.drop(1);\
					[posSteps, negSteps].do\{\cf3 |steps|\cf2  steps.do\{\cf3 |step, i|\cf2  \
						\cf3 var\cf2  dY = step * midiScale * scale[1];\
						\cf3 var\cf2  color = colorFunc.value(i+1).setStroke;\
						\cf3 Pen\cf2 .line(0@(drawSys0-dY) , \cf0 e.refXOff\cf2 @(drawSys0-dY)); \cf3 Pen\cf2 .stroke;\
						strFunc.value(midiRef + step).drawAtPoint(\
							refXGab@(drawSys0 - refFontExt.y - refYGab - dY), refFont, color);\
					\}\};\
				\};\
				\
				\cf3 Pen\cf2 .use\{ \cf3 Pen\cf2 .translate(*trans); refBackColor.setFill; \
					\cf3 Pen\cf2 .fillRect( \cf3 Rect\cf2 .fromPoints(0@0, e.refXOff@drawHeight) );\
					\cf6 //("mode:" + refMode).drawAtPoint(refXGab@refYGab, refFont, refColor);\cf2 \
				\};\
				\
				\cf3 Pen\cf2 .use\{ \cf3 Pen\cf2 .translate(trans[0], scaleDelta[1]);\
					\cf3 Pen\cf2 .width = 1; \
					refColor.set; \cf3 Pen\cf2 .line(0@drawSys0, \cf0 e.refXOff\cf2 @drawSys0); \cf3 Pen\cf2 .stroke;\
					refMode.switch(\
					1, \{\
						freqFunc.value(midiRef)\
						.drawAtPoint(refXGab\
							@(drawSys0 - refFontExt.y - refYGab-2), refFont, refColor);\
						midiFunc.value(midiRef)\
						.drawAtPoint(refXGab\
							@(drawSys0 + refYGab+2), refFont, refColor) \}\
					,2, \{	\
						freqFunc.value(midiRef)\
						.drawAtPoint(refXGab\
							@(drawSys0 - refFontExt.y - refYGab), refFont, refColor);\
						gridFunc.value(freqFunc) \}\
					,3, \{	\
						midiFunc.value(midiRef)\
						.drawAtPoint(refXGab\
							@(drawSys0 - refFontExt.y - refYGab), refFont, refColor);\
						gridFunc.value(midiFunc) \});\
				\}\
			\}\
	\}\})\
);\
\
(\
\cf3 DrawDef\cf2 (\cf4 \\SYSTab_RefIndicator\cf2 , \cf3 nil\cf2 , \
	\{ \{\cf3 |e, refMode, refXGab, refYGab, refFont, refColor, refBackColor, refXOff, drawHeight|\cf2 \
		\cf6 // if (refMode>0) \{ ("mode:" + refMode).drawAtPoint(refXGab@refYGab, refFont, refColor) \}\cf2 \
	\}\})\
);\
\
}