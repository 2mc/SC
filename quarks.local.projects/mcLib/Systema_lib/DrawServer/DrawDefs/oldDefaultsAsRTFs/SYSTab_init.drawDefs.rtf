{\rtf1\ansi\ansicpg1252\cocoartf1038\cocoasubrtf350
{\fonttbl\f0\fnil\fcharset0 Monaco;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;\red0\green0\blue191;\red96\green96\blue96;
\red0\green115\blue0;\red191\green0\blue0;}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\f0\fs18 \cf2 if (\cf3 this\cf2 .isLog(2)) \{ (\cf4 "\\n\\n"\cf2  + \cf3 thisProcess\cf2 .nowExecutingPath.basename + \cf4 "\\n"\cf2 ).postln; \};\
\
(\
\cf3 DrawDef\cf2 (\cf5 \\SYSTab_init\cf2 , \cf5 \\calc\cf2 ,\
	\{\cf3 |node, drawServer, pE, e, self, sysTab|\cf2 \
		\cf3 var\cf2  aCount;\
		\
		pE.putAll(self.envir);\
		\
		drawServer.scaleMode_(pE.scaleMode); \cf6 //also updates back into drawEnvir, but ok\cf2 \
		pE.scale !? \{ drawServer.actionView.scale_(pE.scale, \cf3 false\cf2 ) \}; \cf6 //show next frame only \cf2 \
		pE.move !? \{ drawServer.actionView.oneShotRefreshAction = \{\
			drawServer.actionView.move_(pE.move, \cf3 false\cf2 ) \}\};  \cf6 //do at end of first frame\cf2 \
		\
		\cf6 // keyActions\cf2 \
		aCount = pE.anchorMode;\
\
		drawServer.addActionChar($a, \{\cf3 |down, repeat|\cf2  if (down && repeat.not) \{\
			aCount = aCount+1; pE.anchorMode = aCount.mod(3) \}; \cf3 true\cf2  \});\
		drawServer.addActionChar($A, \{\cf3 |down, repeat|\cf2  if (down && repeat.not) \{\
			aCount = aCount-1; pE.anchorMode = aCount.mod(3) \}; \cf3 true\cf2  \});\
		drawServer.addActionChar($s, \{\cf3 |down, repeat|\cf2  if (down && repeat.not) \{\
			pE.selOn = pE.selOn.not \}; \cf3 true\cf2  \});\
		drawServer.addActionChar($o, \{\cf3 |down, repeat|\cf2  if (down && repeat.not) \{\
			pE.outline = pE.outline.not \}; \cf3 true\cf2  \});\
		\
		\cf6 // click actions\cf2 \
		drawServer.addField(\cf3 ActionField\cf2 , pE.view.bounds, \{\cf3 |sV, cC, mod, bN, cP, p|\cf2 \
			cC.switch(\
			1, \{ mod.switch(\
				131330, \{ pE.refScaleY = 1 \}\
				,524576,\{ sV.move2Origin \}\
				,655650, \{ sV.scale_([1.0, 1.0]) \}\
				, \{\cf3 false\cf2 \} ) \}\
			,2, \{ mod.switch( 131330, \{ \cf3 true\cf2  \}, 524576, \{ \cf3 true\cf2  \}, 655650, \cf3 true\cf2 , \{\cf3 false\cf2 \} ) \}\
			, \{\cf3 false\cf2 \} );\
		\},\{\cf3 |sV, fwdArgs, mod, cP, p, deltaXY|\cf2 \
			mod.switch(\
				131330, \{ pE.sysOffX = (pE.sysOffX + ( deltaXY[0] / 50)).max(0);\
					pE.refScaleY = pE.refScaleY + ( deltaXY[1] / 1000) \}\
				,524576, \{ sV.move_( (sV.move + ( deltaXY / 10000)).min(1).max(0) ) \}\
				,655650, \{ sV.scale_( sV.scale  + ( deltaXY / 10000) )  \} ) \
		\});\
			\
		\cf6 // global vars	\cf2 \
		pE.sysCalcs = ();\
		pE.labelHheight = \cf4 "Archytas"\cf2 .bounds(pE.labelHFont).height;\
		pE.labelFheight = \cf4 "Archytas"\cf2 .bounds(pE.labelFFont).height;\
\
		pE.drawSysYgTop = pE.yHroom + pE.labelHheight + pE.labelHGab; \cf6 // begin gab\cf2 \
		pE.drawSysYgBot = pE.yFroom + pE.labelFheight + pE.labelFGab; \cf6 // end gab\cf2 \
\
		\{\cf3 |e, view, anchorMode octaveRanges, scaleMode, refScaleY, drawSysYgTop, drawSysYgBot, \
			labelFGab, labelHFont, post|\cf2  \
\cf6 //e.postOffset = 300@20;\cf2 \
			\cf6 //x\cf2 \
			e.drawWidth = view.drawBounds.width; \
			e.xMin = 0; e.xMax = e.drawWidth; e.xAddLeft = 0; e.xAddRight = 0;\
			e.offX = e.sysOffX;\
			\cf6 //y\cf2 \
			e.drawHeight = view.drawBounds.height; \
			e.yMin = 0; e.yMax = e.drawHeight; e.yAddTop = drawSysYgTop; e.yAddBot = drawSysYgBot;\
			\cf6 //SYS placing\cf2 \
			e.drawSysH = e.drawHeight - e.drawSysYgTop - e.drawSysYgBot;\
			e.footerTop = e.drawSysYgTop + e.drawSysH + labelFGab;\
			e.drawSys0 = [\{e.drawSysYgTop + (e.drawSysH / 2)\}, \{e.drawSysYgTop + e.drawSysH\}\
				,\{e.drawSysYgTop\}][anchorMode].value;\
			\cf6 //midi scaling\cf2 \
			e.midiSysH = e.drawSysH * refScaleY;\
			e.midiScale = e.midiSysH / (octaveRanges.clipAt(scaleMode) * 12); \
			\cf6 //default midi range\cf2 \
			e.midiMax = octaveRanges.clipAt(scaleMode) * [6, 12, 0][anchorMode]; \
			e.midiMin = octaveRanges.clipAt(scaleMode) * [-6, 0, -12][anchorMode];\
			\cf6 //ref lines\cf2 \
			e.refYmin = \cf3 inf\cf2 ; e.refYmax = -inf;\
			\
			if (drawServer.isPause) \{ \cf4 "paused"\cf2 .drawCenteredIn(view.drawBounds, \
				\cf3 Font\cf2 (\cf4 "Helvetica-Bold"\cf2 ,  e.drawHeight / 6), \cf3 Color\cf2 .grey) \};\
			\
\cf6 //		Pen.fillRadialGradient( //nice, but black is beautiful and gradients are hard to gloss over\cf2 \
\cf6 //				view.bounds.center,\cf2 \
\pard\pardeftab560\ql\qnatural
\cf6 //				view.bounds.center,\cf2 \
\cf6 //				0, view.bounds.width.max(view.bounds.height),\cf2 \
\cf6 //				Color.new255(105, 130, 150, 255),\cf2 \
\cf6 //				Color.new255(57, 73, 88, 255)\cf2 \
\cf6 //			);\cf2 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural
\cf2 			\
post.add([\cf5 \\postln\cf2 , \cf4 "SYSTab:"\cf2  + sysTab.name + \cf4 "refScaleY:"\cf2  + e.refScaleY, 0])\
	\}\})\
);\
\
(\
\cf3 DrawDef\cf2 (\cf5 \\SYSTab_last\cf2 , \cf5 \\calc\cf2 ,\
	\{\{\cf3 |e, drawSys0, midiScale, midiMin, midiMax, yAddTop, yAddBot, xAddLeft, xAddRight, \
		refYmin, refYmax, scale, scaleDelta, scaledView, post|\cf2 \
		\
		e.xMin = e.xMin * scale[0] - xAddLeft;\
		e.xMax = e.xMax * scale[0] + xAddRight;\
		e.yMin = (e.midi2yFunc(midiMax) - yAddTop).min(refYmin); \
		e.yMax = (e.midi2yFunc(midiMin) + scaledView.scaledTransError[1] + yAddBot).max(refYmax);\
		\
		e.canvasBounds = \cf3 Rect\cf2 .fromPoints(e.xMin@e.yMin, e.xMax@e.yMax)\
			.moveBy(0, scaleDelta[1]);\
\
		if (scaledView.canvasBounds != e.canvasBounds) \{ \
				\cf6 // this.logln("upd canvas:" + canvasBounds, lfB:2); \cf2 \
			scaledView.canvasBounds_(e.canvasBounds, \cf3 false\cf2 ); \cf6 //shows next drawing only\cf2 \
		\}; \
						\
		post.add([\cf5 \\postln\cf2 , \cf4 "midiMax, midiMin:"\cf2  + [midiMax, midiMin], 1]);\
		post.add([\cf5 \\postln\cf2 , \cf4 "refYmin, refYmax:"\cf2  + [refYmin, refYmax]]);\
		post.add([\cf5 \\postln\cf2 , \cf4 "drawSys0, yMin, yMax:"\cf2  + [e.drawSys0, e.yMin, e.yMax]]);\
		post.add([\cf5 \\postln\cf2 , \cf4 "canvasBounds:"\cf2  + e.canvasBounds, 0, 1]);\
		\
	\}\})\
);\
}