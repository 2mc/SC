
#+SEQ_TODO: TODO(t) BUG(b) | DONE(d) CANCELLED(c) DEFERRED(f)

* 2011
** 2011-04 April
*** 2011-04-19 Tuesday
**** fixing the scaling of the fft magnitude :spectrogram:
     :PROPERTIES:
     :ENTERED_ON: <2011-04-19 Tue 16:56>
     :END:

The original was: 
					complexarray = ((((Complex( 
							Signal.newFrom( magarray[0] ), 
							Signal.newFrom( magarray[1] ) 
					).magnitude.reverse)).log10) * 80).clip(0, 255); 

This resulted in magnitude values below 1 producing negative values after log10, which were then clipped away. 

***** Correction attempt (needs more testing after re setting fft buffer size to 1024)
      this clipped the higher frequencies away at fft buffer size 2048 or more, but the same was for the original algorithm

		 complexarray = (
			 (Complex(Signal.newFrom(magarray[0]), Signal.newFrom(magarray[1])).magnitude.reverse + 1).log10
			 * 80
		 ).clip(0, 255);
***** minimum necessary change: 
      CLOSED: [2011-04-19 Tue 17:27]
		 complexarray = ((((Complex( 
							Signal.newFrom( magarray[0] ), 
							Signal.newFrom( magarray[1] ) 
					).magnitude.reverse) + 1).log10) * 80).clip(0, 255); 
  

***** Debug tries: 
					complexarray = Complex(
							Signal.newFrom( magarray[0] ), 
							Signal.newFrom( magarray[1] ) 
					).magnitude.reverse + 1; // prevent items < 0 producing negative values at log10
					
					["min, max before log10", complexarray.minItem, complexarray.maxItem].postln;
					complexarray = complexarray.log10;
					["min, max after log10", complexarray.minItem, complexarray.maxItem].postln;
					complexarray = complexarray * 160;
					["max after * 160", complexarray.maxItem].postln;
					
					complexarray = complexarray.clip(0, 255);
					["max after clip", complexarray.maxItem].postln;


/*					complexarray = (80 * Complex( 
							Signal.newFrom( magarray[0] ), 
							Signal.newFrom( magarray[1] ) 
					).magnitude.reverse.log10).clip(0, 255);
*/

***** DONE Introduce more color gradations and tweak the accessing of these 
      CLOSED: [2011-04-19 Tue 18:23]

      use: 
	classvar <>defaultFFTBufSize = 1024, <>colorSize = 64;

	recalcGradient {
		var colors;

//		colors = (0..16).collect({ | val | blend(background, color, val / 16)});
		// _THIS:_
		colors = (0..colorSize).collect({ | val | blend(background, color, val / colorSize)});
//		colors = (1..64).pow(0.01).normalize.collect(blend(background, color, _));
		colints = colors.collect({ | col | Image colorToPixel: col });
	}

      futhermore: 

****** the intensity multiplier variable and the multiplication by 80 need to be tweaked.
****** The colors could be graded with a bias for low values as follows: 
       colors = (1..colorSize).pow(0.01).normalize.collect(blend(background, color, _));

***** Better solution (introduces _much_ more detail in low energy regions
      - Note taken on [2011-04-19 Tue 18:26] \\
	The power exponent in calcGradient could be reduced to 0.1 or other values
****** recalcGradient
	recalcGradient {
		var colors;
		colors = (1..colorSize).pow(0.01).normalize.collect(blend(background, color, _));
		colints = colors.collect({ | col | Image colorToPixel: col });
	}
****** spectrum magnitude scaling in startruntask
					complexarray  = log10(
						1 + 
						Complex(
							Signal.newFrom(magarray[0]), Signal.newFrom(magarray[1])
						).magnitude.reverse;
					).clip(0, 1) * intensity;

  					complexarray.do({ | val, i |
						fftDataArray[i] = colints.clipAt((val * colorSize).round);
					});
**** added scaleable exponent for color mapping :spectrogram:
     :PROPERTIES:
     :ENTERED_ON: <2011-04-19 Tue 19:04>
     :END:

Default: 0.5. Tested between: 0.01 and 1
Higher values: peaks show clearer, lower magnitudes may disappear
Lower values: peaks smear more, lower magnitudes are displayed
**** TODO is var windowparent necessary? perhaps window is enough :spectrogram:
     :PROPERTIES:
     :ENTERED_ON: <2011-04-19 Tue 20:28>
     :END:
*** 2011-04-20 Wednesday
**** TODO simplify additional process mechanism using dependants vars  :spectrogram:
     :PROPERTIES:
     :ENTERED_ON: <2011-04-20 Wed 02:28>
     :END:

Define vars in Spectrogram2: 

1. imageObjects: objects that draw on the image (before it is sent to pen)
1. penObjects: objects that draw with pen (after image is sent to pen) 

An object that wants to draw, must add itself to one of those two lists. 
Spectrogram2 will send all objects stored in imageObects the message drawImage, and all the objects stored in penObjects the image drawPen. 

An object can add itself to start drawing or remove itself to stop drawing. This is simpler than going via NotificationCenter. 
**** fft buffer sizes > 1024 are not supported 			:spectrogram:
     :PROPERTIES:
     :ENTERED_ON: <2011-04-20 Wed 11:07>
     :END:

This is because buf.getn can only fetch up to 1024 values (OSC limit?). 
**** removed frombin - tobin as I find little use for zooming in to part of a spectrum and it complicates the code :spectrogram:
     :PROPERTIES:
     :ENTERED_ON: <2011-04-20 Wed 16:11>
     :END:
**** added toggle tryout.sc + make code palette w. key shortcuts :doclistwindow:
     :PROPERTIES:
     :ENTERED_ON: <2011-04-20 Wed 16:14>
     :END:
**** DocSession:load provides new session if not found in archive :doclistwindow:
     :PROPERTIES:
     :ENTERED_ON: <2011-04-20 Wed 17:07>
     :END:

This is important when installing lilt2 to a new computer that does not have any sessions stored. 
**** DONE code parser should ignore lines where //: is followed by spece :doclistwindow:
     CLOSED: [2011-04-20 Wed 18:01]
     :PROPERTIES:
     :ENTERED_ON: <2011-04-20 Wed 17:38>
     :END:
**** TODO PerformanceWindow should re-parse code on changing docs :doclistwindow:
     :PROPERTIES:
     :ENTERED_ON: <2011-04-20 Wed 17:39>
     :END:
**** TODO add 'doOnce' message to Function			       :idea:
     :PROPERTIES:
     :ENTERED_ON: <2011-04-20 Wed 19:27>
     :END:

Function registers itself to notifier and does not reevaluate. 

Important for booting servers / scopes only once. 

! marked items in DocListWindow type files can use this automatically. Something like: 

   { codeString.interpret }.doOnce 
instead of: 
   { codeString.interpret }.value 
**** BUG code item pane does not refresh properly     :performancewindow:bug:
     :PROPERTIES:
     :ENTERED_ON: <2011-04-20 Wed 21:22>
     :END:

At some point the older items remain on the pane together with the newly selecte ones. 

Could not remedy that.  Suggestion: Try using EZListView instead.
*** 2011-04-21 Thursday
**** added load, play, loadDefault methods to Buffer class :buffer:
     :PROPERTIES:
     :ENTERED_ON: <2011-04-21 Thu 15:28>
     :END:
