/* A network of speakers 

Get the distance of a point on the sphere of the speakers and use it (scaled) as multiplier for the channel that drives it


Polar(1.0, 0)


a = (-10 .. 10);

a - 5

(10 - a)


a = (-pi, -pi + 0.1 .. pi).round(0.01);

a.sin.round(0.01);

1.5 - 1
1.5 - 2


(1.5 - [-2 -1, 0, 1, 2]).abs


(1.5 - (-10..10)).abs;
(0 - (-10..10)).abs;
(10 - (-10..10)).abs;

*/

~directions = [
	[1.0, 0],
	[0.81, 0],
	[0.7, 0],
	[0.6, 0],
	[0.4, 0],
	[0.3, 0],
	[0.18, 0],
	[-0.18, 0],
	[-0.3, 0],
	[-0.4, 0],
	[-0.6, 0],
	[0.81, 0],
	[0.7, 0],
	[0.6, 0],
	[-0.7, 0],
	[-0.81, 0],
	[0.92, 0.18],
	[0.76, 0.16],
	[0.71, 0.18],
	[0.5, 0.21],
	[0.29, 0.18],
	[0.24, 0.16],
	[0.16, 0.18],
	[-0.16, 0.18],
	[-0.24, 0.16],
	[-0.29, 0.18],
	[-0.5, 0.21],
	[-0.71, 0.18],
	[-0.76, 0.16],
	[-0.92, 0.18],
	[0.83, 0.3],
	[0.64, 0.3],
	[0.35, 0.3],
	[0.17, 0.29],
	[-0.17, 0.29],
	[-0.35, 0.3],
	[-0.64, 0.3],
	[-0.83, 0.3],
	[0.75, 0.4],
	[0.5, 0.39],
	[0.25, 0.4],
	[-0.25, 0.4],
	[-0.5, 0.39],
	[-0.75, 0.4],
	[-0.5, 0.5]
];

~speakers = VBAPSpeakerArray(3, ~directions);
~speakers.speakers.first.inspect;

