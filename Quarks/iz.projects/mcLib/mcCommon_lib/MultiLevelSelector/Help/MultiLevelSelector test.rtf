{\rtf1\ansi\ansicpg1252\cocoartf1038\cocoasubrtf350
{\fonttbl\f0\fnil\fcharset0 Monaco;}
{\colortbl;\red255\green255\blue255;\red192\green32\blue31;}
\deftab560
\pard\pardeftab560\ql\qnatural

\f0\fs18 \cf2 z = MultiLevelSelector.new\
z.selected\
	[]\
	\
z.selectAt([1,3],2)\
	nil\
	\
\
z.putAt([], [2])\
z.putAt([2], [4])\
z.putAt([2,1], [9])\
\
z.putAt([1,3, 6, 4], [9]) // -> error\
z.putAt([2, 4], [4])\
z.selectAt([1,3],2)\
	nil\
\
z.selected\
	[]\
	\
z.mlDict.at(\\selector)\
	\cf0 an IdentitySelector\cf2 \
z.selector(0).src\
	\cf0 [ 0, 1, 2]\
	\
\cf2 z.selectAt([], 2)\
	2\
z.selected\
	\cf0 [ 2, 0 ]\
\
\cf2 z.selector(1).src\
	\cf0 [ 0, 1, 2, 3, 4 ]\
	\
\cf2 z.selPath(1)\
	\cf0 [ 2, 0 ]\
	\
	\
ok -----------------------------\
\
\cf2 z = MultiLevelSelector.new\cf0 \
\cf2 z.addAllAt([], SortedList[\\a, \\b, \\c], \\b)\
z.addAllAt([], [\\d], \\a)\
z.addAllAt([], SortedList[\\3], \\3)\
z.selector.src\
	\cf0 SortedList[ 3, a, b, c, d ]\
	\
\cf2 z = MultiLevelSelector.new([[]], nil, [\{|item| item.even\}])\
z.selector.whiteFunc.value(4)\
z.addAllAt([], [8,3,2], \\3)\
z.addAllAt([], [4], \\4)\
z.selector.src\
	\cf0 [ 8, 2, 4 ]\
	\
	\
\cf2 (\
z = MultiLevelSelector.new([SortedList.new(function: \{|a, b| a > b \})], nil, \
	[\{|item| item > 4\}] )\
)\
z.addAllAt([], Array.series(5, 3, 1), \\3)\
z.addAllAt([], Array.series(10, 3, 1), \\3)\
z.selector.src\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab560\ql\qnatural\pardirnatural
\cf0 	SortedList[ 12, 11, 10, 9, 8, 7, 6, 5 ]\
	\
\pard\pardeftab560\ql\qnatural
\cf0 ok -----------------------------\
\
\pard\pardeftab560\ql\qnatural
\cf2 z = MultiLevelSelector([[\\a1, \\b1], [[5],[3]] ])\
z = MultiLevelSelector([[\\a1, \\b1], [[5],[3]] ], [\\b1,[[3], [2]]]) // -> error\
z = MultiLevelSelector([[\\a1, \\b1], [ [[\\c2, \\d2]] ,[[\\e2, \\f2]] ] ])\
z = MultiLevelSelector([[\\a1, \\b1], [ [[\\c2, \\d2]] ] ])\
z = MultiLevelSelector([[\\a1, \\b1], [ [[\\c2, \\d2],   [ [[\\c2, \\d2]] ]   ]  ] ])\
z = MultiLevelSelector([[\\a1, \\b1], [ [[\\c2, \\d2],   [ [[\\c2, \\d2]] ]   ],  [[\\e2, \\f2]]  ] ])\
z = MultiLevelSelector([[\\aa, \\a1, \\b1], [ [[\\c2, \\d2],   [ [[\\c2, \\d2]] ]   ],  [[\\e2, \\f2]]  ] ])\
z = MultiLevelSelector([[\\a1, \\b1], [ nil ,[[\\e2, \\f2]] ] ], [ 1, [nil, [1]]])\
z.mlDict.postTree\
\
\
z = MultiLevelSelector([[\\a1, \\b1], [[[5, 3, 4]], nil] ])\
\
z.selPath\
z.selPath(nil, \\a1)\
z.selPath(0)\
z.selPath(1)\
z.selector(0).src\
z.selector(1).src\
z.selected(1)\
\
z.mlDict.at(\\b1, \\selector).src // -> error\
z.mlDict.at(\\a1, \\selector).selected\
z.mlDict.postTree\
z.mlDict.leaves\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab560\ql\qnatural\pardirnatural
\cf0 	*<MultiLevelSelector>       -> selPath: [ nil, [  ] ] |  \
	a MultiLevelSelector\
	\
	*<MultiLevelSelector>       -> selPath: [ nil, [  ] ] |  \
	[ a1, 5 ]\
	\
	*<MultiLevelSelector>       -> selPath: [ nil, [ a1 ] ] |  \
	[ 5 ]\
	\
	*<MultiLevelSelector>       -> selPath: [ 0, [  ] ] |  \
	[ a1 ]\
	\
	*<MultiLevelSelector>       -> selPath: [ 1, [  ] ] |  \
	[ a1, 5 ]\
	\
	[ a1, b1 ]\
	\
	[ 5, 3, 4 ]\
\
	[ a1, 5 ]\cf2 \
\pard\pardeftab560\ql\qnatural
\cf2 \
\pard\pardeftab560\ql\qnatural
\cf0 ok -----------------------------\
\
obiges mit 2. Zeile (error:)\
\pard\pardeftab560\ql\qnatural
\cf2 z = MultiLevelSelector([[\\a1, \\b1], [[5],[3]] ], [\\b1,[[3], [2]]]) // -> error\
z = MultiLevelSelector([[\\a1, \\b1], [[5],[3]] ], [1,[[3], [2]]]) // -> only indices are allowed as selctions at creation time!\cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab560\ql\qnatural\pardirnatural
\cf0 \
[ b1, 2 ]\
\
[ 3 ]\
\
[ b1 ]\
\
[ b1, 2 ]\
\
[ a1, b1 ]\
\
[ 0, 1, 2 ]\
\
[ b1, 2 ]\
\
[ 0, 1, 2 ]\
\
3\
\
\
selector: 	an IdentitySelector\
b1: \
	selector: 	an IdentitySelector\
a1: \
	selector: 	an IdentitySelector\
MultiLevelIdentityDictionary[(selector -> an IdentitySelector), (b1 -> IdentityDictionary[ (selector -> an IdentitySelector) ]), (a1 -> IdentityDictionary[ (selector -> an IdentitySelector) ])]\
\
[ an IdentitySelector, [ an IdentitySelector ], [ an IdentitySelector ] ]\cf2 \
\pard\pardeftab560\ql\qnatural
\cf2 \
\pard\pardeftab560\ql\qnatural
\cf0 ok -----------------------------\
\
\
\pard\pardeftab560\ql\qnatural
\cf2 z.selected\
z.selected(0)\
z.selected(1)\
z.selected(2)\
z.selectedAt(\\a1)\
z.selectedAt(\\b1)\
\
z.selector(0).src\
z.selector(1).src\
z.selector(2)\
z.selector.src\
z.selectorAt.src\
z.selectorAt(\\a1).src\
\
z.removeAt(\\a1)\
z.removeAt(\\b1)\
z.mlDict.postTree\
\
z.putAt([\\a1], [[\\g1, \\g2, \\g3]] )\
z.putAt([\\b1], [[\\h1, \\h2]], [\\h2] )\
z.mlDict.postTree\cf0 \
\cf2 \
z.selectAt([\\a1], 5)\
z.selectAt([\\a1], 8)\
z.selectAt([\\a1], 1)\
z.selectAt([\\b1], 1)\
z.selectAt([\\b1], \\h1)\
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab560\ql\qnatural\pardirnatural
\cf0 b1\
2\
a MultiLevelSelector\
\
[ b1, 2 ]\
\
[ b1 ]\
\
[ b1, 2 ]\
\
[ b1, 2, nil ]\
\
3\
\
2\
\
nil\
\
[ a1, b1 ]\
\
[ 0, 1, 2 ]\
\
nil\
\
[ 0, 1, 2 ]\
\
[ a1, b1 ]\
\
[ 0, 1, 2, 3, 4 ]\
\
nil\
\
a1\
\
b1\
\
\
selector: 	an IdentitySelector\
MultiLevelIdentityDictionary[(selector -> an IdentitySelector)]\
\
a MultiLevelSelector\
\
a MultiLevelSelector\
\
\
selector: 	an IdentitySelector\
b1: \
	selector: 	an IdentitySelector\
a1: \
	selector: 	an IdentitySelector\
MultiLevelIdentityDictionary[(selector -> an IdentitySelector), (b1 -> IdentityDictionary[ (selector -> an IdentitySelector) ]), (a1 -> IdentityDictionary[ (selector -> an IdentitySelector) ])]\
\
nil\
\
nil\
\
nil\
\
nil\
\
a1\
h1\
\
\pard\pardeftab560\ql\qnatural
\cf0 ok -----------------------------\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab560\ql\qnatural\pardirnatural
\cf2 \
}