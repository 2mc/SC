{\rtf1\ansi\ansicpg1252\cocoartf1038\cocoasubrtf350
{\fonttbl\f0\fnil\fcharset0 Monaco;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue191;\red96\green96\blue96;\red0\green115\blue0;
\red191\green0\blue0;}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\f0\fs18 \cf0 if (\cf2 this\cf0 .isLog(2)) \{ (\cf3 "\\n\\n"\cf0  + \cf2 thisProcess\cf0 .nowExecutingPath.basename + \cf3 "\\n"\cf0 ).postln; \};\
\
(\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural
\cf2 DrawDef\cf0 (\cf4 \\SYSTab_play\cf0 , \cf4 \\draw\cf0 ,\
	\{\cf2 |node, drawServer, pE|\cf0  \cf5  \cf0 \
		\cf2 var\cf0  totalRect = \cf2 Rect\cf0 .new;\
\
		pE.refToneSynths = pE.refToneSynths ?? \{\cf2 List\cf0 []\};\
		pE.refToneMidiNotes = pE.refToneMidiNotes ?? \{\cf2 List\cf0 []\}; \
		pE.refToneRects = pE.refToneRects ?? \{\cf2 List\cf0 []\};\
		if (pE.refToneActionFields.isNil) \{ pE.refToneActionFields = \cf2 List\cf0 []\
		\}\{ drawServer.actionFields.addAll(pE.refToneActionFields) \}; \cf5 //restore move fields\cf0 \
				\
		drawServer.addField(\cf2 ScaledActionField\cf0 , totalRect, \{\cf2 |sV, cC, mod, bN, cP, p|\cf0 \
			mod.switch( \
				1573160, \{ \
					drawServer.beginDragAction = \{\cf2 |v, x, y, mod|\cf0  v.dragLabel = \cf3 "play"\cf0  \};\
					\cf2 Pbind\cf0 (\cf4 \\midinote\cf0 , \cf2 Pseq\cf0 ([pE.y2midiFunc(p.y)]), \cf4 \\dur\cf0 , 1).play; \cf2 true\cf0  \}\
				,1704234, \{ \{ \cf5 //extra func to avoid 'will not be inlined' warning\cf0 \
					\cf2 var\cf0  index, refRect = \cf2 Rect\cf0 .new, midi = pE.y2midiFunc(cP.y);\
					\cf2 var\cf0  synth = \{\cf2 |freq|\cf0  \cf2 SinOsc\cf0 .ar(freq, 0, 0.2) \}.play(\
							fadeTime: 0.2, args: [\cf4 \\freq\cf0 , midi.midicps]);\
					drawServer.beginDragAction = \{\cf2 |v|\cf0  v.dragLabel = \cf3 "set reference tone"\cf0  \};\
					pE.refToneSynths.add(synth); pE.refToneMidiNotes.add(midi);\
					pE.refToneRects.add(refRect);\
					index = pE.refToneRects.indexOf(refRect);\
					pE.refToneActionFields.add(\
						drawServer.addField(\cf2 ActionField\cf0 , refRect, \{\cf2 true\cf0 \}, \{\cf2 |sV, args, mod, cP, p|\cf0 \
							\cf2 var\cf0  midi = pE.y2midiFunc(sV.convertBwd(0, p.y)[1]);\
							if (\cf2 false\cf0 ) \{ \cf2 false\cf0  \}\'a0\{\
								synth.set(\cf4 \\freq\cf0 , midi.midicps);\
								pE.refToneMidiNotes.put(index, midi) \} \});\
					) \}.value \}\
				,1835305, \{ \
					drawServer.beginDragAction = \{\cf2 |v|\cf0  v.dragLabel = \cf3 "clear reference tones"\cf0  \};\
					pE.refToneActionFields.do\{\cf2 |field|\cf0  drawServer.removeField(field) \};\
					pE.refToneSynths.do\{\cf2 |synth|\cf0  synth.releaseSynth(0.2)\};\
					pE.refToneActionFields.clear; pE.refToneSynths.clear; \
					pE.refToneRects.clear; pE.refToneMidiNotes.clear \}\
				, \{ \cf2 false\cf0  \}) \});\
\
		\{\cf2 |e, scaledView|\cf0 \
			totalRect.set(*scaledView.totalBounds.asArray);\
	\}\}\
	,\{\{\cf2 |e, refToneMidiNotes, refToneRects, refScaleY, scaledView, scale, outline, selHeight=10,\
		drawSys0, midiScale, midiRef|\cf0 \
		\cf2 var\cf0  bounds = scaledView.drawBounds;\
		refToneRects.do\{\cf2 |rect, i|\cf0  \
			\cf2 var\cf0  y = drawSys0 - (refToneMidiNotes[i] - midiRef * midiScale);\
			\cf2 var\cf0  scaledY = scaledView.convertFwd(0, y)[1];\
	\cf2 var\cf0  yy = e.midi2yFunc(refToneMidiNotes[i]);\
this.logln([yy, y, scaledY]);\
			rect.set(bounds.left, scaledY - (selHeight / 2), bounds.width, selHeight);\
//this.logln("bounds.left@scaledY, bounds.right@scaledY" + [bounds.left@scaledY, bounds.right@scaledY]);\
			\cf2 Color\cf0 .red.setStroke; \cf2 Pen\cf0 .line(bounds.left@scaledY, bounds.right@scaledY); \cf2 Pen\cf0 .stroke;\
			if (outline) \{ \cf2 Color\cf0 .grey.setStroke; \cf2 Pen\cf0 .strokeRect(rect) \}\
		\}\
	\}\})\
);}