{\rtf1\mac\ansicpg10000\cocoartf102
{\fonttbl\f0\fswiss\fcharset77 Helvetica-Bold;\f1\fswiss\fcharset77 Helvetica;\f2\fnil\fcharset77 Monaco;
}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;\red0\green0\blue191;\red191\green0\blue0;
\red0\green115\blue0;\red0\green0\blue191;}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b\fs24 \cf0 This file is part of The PCSet Library.\
\
    The PCSet Library is free software; you can redistribute it and/or modify\
    it under the terms of the GNU General Public License as published by\
    the Free Software Foundation; either version 2 of the License, or\
    (at your option) any later version.\
\
    The PCSet Library is distributed in the hope that it will be useful,\
    but WITHOUT ANY WARRANTY; without even the implied warranty of\
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\
    GNU General Public License for more details.\
\
    You should have received a copy of the GNU General Public License\
    along with The PCSet Library; if not, write to the Free Software\
    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\
    02111-1307  USA\
\
    The PCSet Library. Copyright Nick.M.Collins 2004. contact nick@sicklincoln.org\

\f1\b0 \

\fs40 The PCSet Library (1.0) for SuperCollider 3
\fs24 \
\
by Nick.M.Collins first released 8/1/04\
\
All this library really does at the moment is generate equivalence classes. It uses methods based on R.C.Read's Orderly Algorithm with some twists by myself. \
\
Because SC Lang is slow compared to C and I haven't thoroughly optimised, I advise not using this on \
pc universes with more than 20 pitch classes. Or keep the m in m-set small compared to the universe size. This is merely a proof of concept for the equivalence class generating algorithms. Might be helpful to some though. \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2\fs18 \cf0 \
\
\cf2 \
a=\cf3 PCSet\cf2 ([0,1,4,8,9,10],13);\
a.code\
a.array\
a.complement.array;\
\
b=\cf3 SetClass\cf2 (a)\
\
b.rep.array\
b.rep.code\
\
\cf4 //show all equivalence class members\cf2 \
c=b.expandTnI(b.rep)\
\
c.do(\{\cf3 arg\cf2  val; val.pcarray.postln;\})\
\
a=\cf3 OrderlyAlgorithm\cf2 .new(12);\
a.generate;\
\cf3 Post\cf2  <<a.getMSets(3)<<nl;\
\
\cf4 //should be 224 (see Forte's list in The Structure of Atonal Music)\cf2 \
a.getPCSpace.flatten.size.postln;\
\
\cf4 //do the same for transpoition equivalence only\cf2 \
\cf3 SetClass\cf2 .group= \cf5 \\expandT\cf2 ;\
a.generate;\
a.getPCSpace.flatten.size.postln;\
\
\cf4 //restore\cf2 \
\cf3 SetClass\cf2 .group= \cf5 \\expandTnI\cf2 ;\
\
\cf4 //direct generation of the tetrachords for the 15 pc universe\cf2 \
\cf3 Post\cf2  << \cf3 OrderlyAlgorithm\cf2 (15).findMSets(4).getMSets(4) <<nl; \
\
\cf4 //create entire 11-space and return all set class representatives as an array of m-set arrays\cf2 \
\cf3 Post\cf2  << \cf3 OrderlyAlgorithm\cf2 (11).pcSpace<<nl;\
\
\cf4 //CAUTION- takes about five minutes to run on my 400 MHz G4 PB\cf2 \
\cf4 //you eventually end up with 4752 set classes for TnI equivalance\cf2 \
\cf3 Post\cf2  << \cf3 OrderlyAlgorithm\cf2 (20).findMSets(10).getMSets(10) <<nl; \
\
\cf4 //quick by comparison...\cf2 \
\cf4 //all quartertonal 3-sets\cf2 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf6 Post\cf0  << \cf6 OrderlyAlgorithm\cf0 (24).findMSets(3).getMSets(3) <<nl; \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf2 \
\cf4 //also gives the 21-sets\cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf6 Post\cf0  << \cf6 OrderlyAlgorithm\cf0 (24).getMSets(21) <<nl; \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf2 \
\
\cf3 SetClass\cf2 .group= \cf5 \\expandTnImult\cf2 ;\
\cf3 SetClass\cf2 .mult= 5;	\cf4 //best if mult and universe size coprime to avoid\cf2 \
				\cf4 //equivalences between pcsets with different numbers of elements\cf2 \
\
\cf4 //158 set classes\cf2 \
\cf3 Post\cf2  << \cf3 OrderlyAlgorithm\cf2 (12).pcSpace <<nl;\
\
\
\cf4 //takes a little while and only comes back with 3, due to the big set classes involved\cf2 \
\cf3 Post\cf2  << \cf3 OrderlyAlgorithm\cf2 (17).findMSets(3).getMSets(3) <<nl; \
\
\cf4 //transposition 5-sets in 29 pc universe\cf2 \
\cf3 SetClass\cf2 .group= \cf5 \\expandT\cf2 ;\
\cf3 Post\cf2  << \cf3 OrderlyAlgorithm\cf2 (29).findMSets(5).getMSets(5) <<nl; \
\
\
\
\
\
\cf0 \
}