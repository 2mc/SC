{\rtf1\mac\ansicpg10000\cocoartf102
{\fonttbl\f0\fswiss\fcharset77 Helvetica;\f1\fswiss\fcharset77 Helvetica-Bold;\f2\fnil\fcharset77 Monaco;
}
{\colortbl;\red255\green255\blue255;\red191\green0\blue0;\red0\green0\blue191;\red96\green96\blue96;
}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\fs18 \cf0 This file is part of The BBCut Library. Copyright (C) 2001  Nick M.Collins distributed under the terms of the GNU General Public License full notice in file BBCutLibrary.help\

\f1\b\fs36 \
BBCutGroup
\f0\b0\fs24 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\b \cf0 BBCutGroup.new(Array of BBCutSynths, group, outbus)
\f0\b0 \

\f1\b BBCG.new(Array of BBCutSynths, group, outbus)
\f0\b0 \
\
The BBCutGroup class provides a new layer to BBCut to cope with SC3's execution graph and busses \
paradigm for the Server. It is hidden in some simpler shortcut implementations. By passing in a Group \
Node you have created to take the Synths created by the BBCutSynths you can make BBCut conform \
to your needs. The Array of BBCutSynths will be rendered to the group in the reverse order they are in\
in the array.\
\
[BBCSFilter1.new, BBCSAudio1.new]\
\
will have the BBCSAudioIn synths spawned at the top of the Group, and the BBCSFilter1 will create a \
permanent filter synth at the bottom of the group, so that the fx execution order is appropriate.\
All FX  manipulations will be using ReplaceOut on the outbus bus. \
\
You should never mix up multiple BBCutSynthSFs in a single BBCG at the moment. There \
is no crash danger, but the offset manipulations of one may affect the second. \
\
Rather than write BBCutGroup.new you can always use the shortcut BBCG.new\
\

\f1\b bbcsarray -
\f0\b0  an Array of BBCutSynths, though this argument can also cope with being passed a \
BBCutSynth directly.\
  \

\f1\b group -
\f0\b0  A Group object .\
\

\f1\b outbus -
\f0\b0  an instance of a class derived from BBCutProc.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2 \cf0 \
Examples- please use your own sample sources\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\fs18 \cf0 (	\cf2 //example of explicit list of BBCutSynths with implied execution order\cf0 \
\cf3 BBCut\cf0 ([BBCG([BBCSFilter1.new, \cf3 BBCSAudioIn\cf0 .new])]).go;\
)\
\
\cf2 //be careful with outbusses! If everything is rendered to outbus 0, the fx units\cf0 \
\cf2 //will replaceOut the whole output. Usually, you'll render to a secondary bus \cf0 \
\cf2 //then write back to the main out. Compare-\cf0 \
\
\cf2 //defaults  so all rendered to outbus 0, filter affects everything\cf0 \
(\
\cf3 var\cf0  sf;\
\
sf=\cf3 SF3\cf0 .array([\cf4 "break"\cf0 , \cf4 "break2"\cf0 ],[8,4]);\
\
\cf3 BBCut\cf0 (\cf3 BBCutSynthSF\cf0 (sf.at(0),panfunc:-0.75)).tempo_(2).go;\
\cf3 BBCut\cf0 ([\cf3 BBCSFilter1\cf0 .new, \cf3 BBCutSynthSF\cf0 (sf.at(0),panfunc:0.75)]).tempo_(2).go;\
\
\cf2 //\{Out.ar(0, In.ar(3,2))\}.play;\cf0 \
)\
\
\
\cf2 //more careful, filter group is rendered to its own bus then mixed back in\cf0 \
(\
\cf3 var\cf0  sf;\
\
sf=\cf3 SF3\cf0 .array([\cf4 "break"\cf0 , \cf4 "break2"\cf0 ],[8,4]);\
\
\cf3 BBCut\cf0 (\cf3 BBCutSynthSF\cf0 (sf.at(0),panfunc:-0.75)).tempo_(2).go;\
\
\cf2 //specify outbus 3 for rendering this\cf0 \
\cf3 BBCut\cf0 (\cf3 BBCG\cf0 ([\cf3 BBCSFilter1\cf0 .new, \cf3 BBCutSynthSF\cf0 (sf.at(0),panfunc:0.75)], \cf3 nil\cf0 , 3)).tempo_(2).go;\
\
\{\cf3 Out\cf0 .ar(0, \cf3 In\cf0 .ar(3,2))\}.play;\
)\
\
\
\
}