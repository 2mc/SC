{\rtf1\mac\ansicpg10000\cocoartf102
{\fonttbl\f0\fswiss\fcharset77 Helvetica;\f1\fswiss\fcharset77 Helvetica-Bold;\f2\fnil\fcharset77 Monaco;
}
{\colortbl;\red255\green255\blue255;\red191\green0\blue0;\red0\green0\blue191;\red96\green96\blue96;
\red0\green115\blue0;}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\fs18 \cf0 This file is part of The BBCut Library. Copyright (C) 2001  Nick M.Collins distributed under the terms of the GNU General Public License full notice in file BBCutLibrary.help\

\f1\b\fs30 \
BBCutProc11
\f0\b0\fs24 \
\

\f1\b Superclass: BBCutProc
\f0\b0 \
\
The original automatic breakbeat cutting algorithm as refined in the BreakBeatx series of classes. This cut procedure favours small odd number length cuts with respect to some subdiv integer for a phrase. A block consists of an original cut plus some number of repeats. A special fast 'stutter' or 'roll' can occur only to finish off a given phrase.\
   As is normal for cut procedures and synths, the value message is used to get the current value of any input parameter, so functions can be passed.  Defaults are provided for all arguments.\
\

\f1\b \ul Class Methods
\f0\b0 \ulnone \
\
*
\f1\b new(sdiv, barlength, phrasebars, numrepeats, stutterchance, stutterspeed, stutterarea)
\f0\b0    \
Create a BBCutProc11 object with the given parameters.\
\

\f1\b sdiv
\f0\b0  - sub division.  A single measure is cut up into sdiv primitive units. So sdiv=8 over 4 beats gives\
eighth note resolution cutting.\

\f1\b barlength 
\f0\b0 - Normally set to 4.0 beats, for 4/4 bars, this can be altered to allow cuts over a different \
number of beats. So barlength= 3 gives cuts respecting 3/4. \

\f1\b phrasebars 
\f0\b0 - The length of the current phrase is barlength*phrasebars. \

\f1\b numrepeats 
\f0\b0 - Total number of repeats for normal cuts. So 2 corresponds to a particular size cut \
at one offset plus one exact repetition.\

\f1\b stutterchance
\f0\b0  - the tail of a phrase has this chance of becoming a repeating one unit cell stutter\
(0.0 to 1.0)\

\f1\b stutterspeed 
\f0\b0 - the stutter can be an integer multiple of the subdivision speed. For instance, if subdiv is\
8 (quavers) and stutterspeed is 2, then the stutter is in semiquavers (subdiv 16).\

\f1\b stutterarea -
\f0\b0  a stutter is permissible within this proportion of the last bar of a phrase. Use values larger than\
1 for stutters across multiple bars. The default is 0.5, for a half bar at 4/4.\
\

\f1\b \ul Instance Methods
\f0\b0 \ulnone \
\

\f1\b initBBCutProc11(sd, bl, pb, nr, sc, ss, sa) 
\f0\b0 Called internally after a new.\
\
Other methods are overrides of BBCutProc base class behaviour. BBCutProc11 will flag a roll when stuttering.\
\
Examples- You'll have to substitute your own break sample to hear the rhythmic aspects of this procedure\
properly\

\f2 \

\fs18 (	\cf2 //default cutups\cf0 \
\cf3 var\cf0  sf;\
\
sf= \cf3 SF3\cf0 (\cf4 "break"\cf0 ,8);\
\
\cf3 BBCut\cf0 (\cf3 BBCutSynthSF\cf0 (sf),\cf3 BBCutProc11\cf0 .new).tempo_(2.4).go;\
)
\fs24 \
\
\

\fs18 (	\cf2 //demonstrating tempo following\cf0 \
\cf3 var\cf0  bbcut, pulse;\
\cf3 var\cf0  sf;\
\
sf= \cf3 SF3\cf0 (\cf4 "break"\cf0 ,8);\
\
bbcut= \cf3 BBCut\cf0 (\cf3 BBCutSynthSF\cf0 (sf),\cf3 BBCutProc11\cf0 .new(8,4.0,2,3,0.5,3,1.0)).tempo_(2);\
\
pulse= \cf3 SynthDef\cf0 (\cf5 \\pulse\cf0 , \{\cf3 arg\cf0  rate= 2; Out.ar(0,\cf3 LFPulse\cf0 .ar(rate,0,0.05,\cf3 SinOsc\cf0 .ar(440,0,0.5)))\}).play;\
\
\cf2 // define a control\cf0 \
\cf3 SynthDef\cf0 (\cf4 "mousex"\cf0 , \{\
	\cf3 ReplaceOut\cf0 .kr(10, \cf3 MouseX\cf0 .kr(2,3));		\cf2 //MouseX tempo control \cf0 \
\}).play;\
\
\cf2 //potential drawback- all c_set messages will go here! So for different control busses\cf0 \
\cf2 //can't give own unique functions unless setup a csetOSCresponder class as well. \cf0 \
\cf3 OSCresponder\cf0 (s.addr, \cf5 '/c_set'\cf0 , \{\cf3 arg\cf0  time, resp, msg; \
\
bbcut.tempo_(msg.at(2));\
pulse.set(\cf5 \\rate\cf0 , msg.at(2));\
\
\}).add;\
\
bbcut.go; \
\
\cf2 //must have OSCResponder for c_set, get 10 tempo readings a second\cf0 \
\cf3 SystemClock\cf0 .sched(1.0, \{s.sendMsg(\cf4 "/c_get"\cf0 , 10); 0.1\});\
\
)\

\fs24 \
\
\
\

\fs18 (\
	\cf2 //showing use of all parameters\cf0 \
\cf3 var\cf0  w;\
\cf3 var\cf0  slider,string;\
\cf3 var\cf0  num;\
\cf3 var\cf0  names,data, specs, lastval;\
\cf3 var\cf0  sf, bbcutter;\
\
names= [\cf4 "tempo"\cf0 ,\cf4 "cut"\cf0 ,\cf4 "phrasebars"\cf0 ,\cf4 "stutterchance"\cf0 ,\cf4 "stutterspeed"\cf0 ,\cf4 "restchance"\cf0 ,\cf4 "ampvariation","panvariation"\cf0 ,\cf4 "numrepeats"\cf0 ,\cf4 "beatsperbar"\cf0 ,\cf4 "randomoffset"\cf0 ];\
\
data=	\cf2 //control spec data for ui controls\cf0 \
[\
[2.0,3.0,\cf5 \\exp\cf0 , 0.0,2.5],	\cf2 //tempo\cf0 \
[4,16,\cf5 \\lin\cf0 ,1,8],			\cf2 //cuts\cf0 \
[1,5,\cf5 \\lin\cf0 ,1,2],	\cf2 //phrasebars\cf0 \
[0.0,1.0,\cf5 \\lin\cf0 ,0.0,0.2],	\cf2 //stutterchance\cf0 \
[1,3,\cf5 \\lin\cf0 ,1,2],			\cf2 //stutterspeed\cf0 \
[0.0,1.0,\cf5 \\lin\cf0 , 0.0,0.0],	\cf2 //restchance\cf0 \
[0.0,1.0,\cf5 \\amp\cf0 , 0.0,1.0],	\cf2 //ampvariation\cf0 \
[0.0,1.0,\cf5 \\lin\cf0 , 0.0,0.0],	\cf2 //panvariation\cf0 \
[1,5,\cf5 \\lin\cf0 ,1,2],			\cf2 //numrepeats\cf0 \
[2.0,6.0,\cf5 \\lin\cf0 ,1.0, 4.0],	\cf2 //subdivision over x beats\cf0 \
[0.0,1.0,\cf5 \\lin\cf0 ,0.0, 0.0]	 	\cf2 //offsetchance \cf0 \
];\
\
specs= \cf3 Array\cf0 .fill(data.size, \{\cf3 arg\cf0  i; \cf3 ControlSpec\cf0 .performList(\cf5 \\new\cf0 , data.at(i))\});\
\
num= names.size;\
\
w = \cf3 SCWindow\cf0 (\cf4 "BBCutProc11 demo N.M.Collins 23/08/03"\cf0 , \cf3 Rect\cf0 .new(100, 500, 500, (30*num)));\
\
string= \cf3 Array\cf0 .fill(num);\
slider= \cf3 Array\cf0 .fill(num);\
\cf2 //Fill with defaults. This array will hold the updated last value of any GUI element\cf0 \
lastval= \cf3 Array\cf0 .fill(num, \{\cf3 arg\cf0  i; data.at(i).at(4);\}); \
\
num.do(\
\{\
\cf3 arg\cf0  i;\
\
\cf3 SCStaticText\cf0 ( w, \cf3 Rect\cf0 .new(5, (30*i)+5, 95,20)).string_(names.at(i));\
slider.put(i,\cf3 SCSlider\cf0 .new( w, \cf3 Rect\cf0 .new(105, (30*i)+5, 95,20)));\
\cf2 //set slider to default value, else will default to 0.0\cf0 \
slider.at(i).value_(specs.at(i).unmap(data.at(i).at(4)));\
string.put(i, \cf3 SCStaticText\cf0 ( w, \cf3 Rect\cf0 .new(205, (30*i)+5, 95,20)).string_(data.at(i).at(4)));\
\
slider.at(i).action_(\{\cf3 arg\cf0  sl; \
\cf3 var\cf0  val; val = specs.at(i).map(sl.value);  string.at(i).string_(val); \
lastval.put(i, val);  \cf2 //set associated variable to this value, bbcut code will poll this rather than the slider directly\cf0 \
\});\
\
\});\
\
w.front;\
\
sf= \cf3 SF3\cf0 (\cf4 "break"\cf0 ,8);\
\
bbcutter=\cf3 BBCut\cf0 (\
\cf3 BBCutSynthSF\cf0 (sf,\{lastval.at(10)\},\
\{\
if(lastval.at(5).coin,	\cf2 //restchance\cf0 \
\{0\},\
\{\
rrand(lastval.at(6),1.0)\} \cf2 //amp variation\cf0 \
)\},	\
\{rrand(-1.0*(lastval.at(7)),lastval.at(7))\}), \cf2 //panvariation\cf0 \
\
\cf3 BBCutProc11\cf0 .new(\
\{lastval.at(1)\},	\cf2 //cut\cf0 \
\{lastval.at(9)\},	\cf2 //sdbeats\cf0 \
\{lastval.at(2)\},	\cf2 //phrasebars\cf0 \
\{lastval.at(8)\},	\cf2 //numrepeats\cf0 \
\{lastval.at(3)\},	\cf2 //stutterchance\cf0 \
\{lastval.at(4)\}	\cf2 //stutterspeed\cf0 \
));\
\
bbcutter.tempo_(lastval.at(0)).go;\
\
\cf2 //update tempo twenty times a second\cf0 \
\cf3 SystemClock\cf0 .sched(0.0,\{bbcutter.tempo_(lastval.at(0)); 0.05\});\
\
)\
\
\

\f0\fs24 \

\f2\fs18 \cf2 //If you want fast varying time signatures set phrasebars=1, \
//and provide interconnected functions updating barlength and sdiv. \
\cf0 (	\cf2 //default eighth note cutups\cf0 \
\cf3 var\cf0  sf,newbarl,phrasecount;\
sf= \cf3 SF3\cf0 (\cf4 "break"\cf0 ,8);\
\
phrasecount=0;\
\
\cf3 BBCut\cf0 (\cf3 BBCutSynthSF\cf0 (sf),\cf3 BBCutProc11\cf0 .new(\
\{\
newbarl=[4.0,3.0,3.5].wrapAt(phrasecount);		\cf2 //4/4 then 3/4 then 7/8 looping\
\cf0 phrasecount=phrasecount+1;\
newbarl*2	\cf2 //always eighth note cuts\
\cf0 \},\
\{newbarl\},\
1\
)).tempo_(2.4).go;\
\
)
\fs24 \

\fs18 \
\
\
////////////\
For additional data on the algorithm see\
Nick Collins, "Algorithmic Composition Methods for BreakBeat Science",\
Proceedings of Music Without Walls, ISBN 1857213319\
reproduced at http://www.axp.mdx.ac.uk/~nicholas15/\
////////////\

\f0\fs24 \
\
}