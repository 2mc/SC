{\rtf1\ansi\ansicpg1252\cocoartf1138\cocoasubrtf230
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset0 Monaco;}
{\colortbl;\red255\green255\blue255;\red191\green0\blue0;\red0\green0\blue191;\red96\green96\blue96;
}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720

\f0\fs18 \cf0 This file is part of The BBCut Library. Copyright (C) 2001  Nick M.Collins distributed under the terms of the GNU General Public License full notice in file BBCutLibrary.help
\b\fs30 \
\
CampCutProc
\b0\fs24 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720

\b \cf0 Superclass: BBCutProc
\b0 \
\
After a challenge by Robert Godman, this class implements cutting based on change ringing, that is,\
campanology. The paradigm is that of swapping offset positions. So the procedure works in small phrases,\
splitting that phrase into a number of blocks equal to the number of bells. Each bell has a proscribed\
offset position, so as they are permuted, the sequence of offsets change. Because the permutation\
sequences of bells can take a long time before repetition (whether or not they exhaust the permutation\
space) the CampCutProc is ideal for providing a constantly changing background of great variety\
from a small source.  \
   The auxilliary class is CampStream, used for setting up the permutation data. There is little possibility\
to change data once running. The format for change ringing permtations is as follows:\
A permutation sequence is represented in change ringing texts by which elements are unpermuted.\
Let us work out the data for the Gainsborough Little Bob Major.\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720

\f1\fs18 \cf2 Gainsborough Little Bob Major\
x.18.x.18.x.16.x.18.x.18.x.12
\f0\fs24 \cf0 \
\
The x stands for 'change all'. Permutations are always of adjacent pairs. It is this limited permutation\
movement that gives the slow undulating changes that characterise change ringing. Like the librarian's\
dilemma problem, the sequence of involutions can take a while to acheive large shifts, but it gets there in the\
end. \
We need to be more specific- we must write down what does change. However, since we know that a given \
element to be swapped must swap with it's adjacent element, we only need list the leftmost of each pair to swap.\
\

\f1\fs18 \cf2 permutation chain representation\
array indexing, elements are 0 to 7\
a=(01)(23)(45)(67), b=(23)(45)(67) c=(12)(34)(67) d=(23)(45)(67)\
ababacababad\
\
rep as list of first of involution pairs\
a=[0,2,4,6]\
b=[1,3,5]\
c=[1,3,6]\
d=[2,4,6]
\f0\fs24 \cf0 \
\
Then a above was the x in the change ringing notation. The CampStream takes as it's arguments \
permdata, method and bells. For the above example the permdata is the array [a, b, c, d] containing all\
the necessary permutations to specify the recipe for the Gainsborough LBM. The method is the \
sequence of use of these tokens, indexing the permdata array, as a stream, so \
\

\f1\fs18 \cf3 Pseq\cf0 ([0,1,0,1,0,2,0,1,0,1,0,3],\cf3 inf\cf0 ).asStream
\f0\fs24 ; \
\
The number of bells is 8 for this composition. Camp Stream allows you (with some effort to rewrite the \
permutation sequence), to use any change ringing composition. Further, you can easily invent your own \
methods (without worrying about the rigour of covering all of a permutation space).\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720

\b \cf0 \ul \ulc0 Class Methods
\b0 \ulnone \
\
*
\b new(campstream, phraselength)
\b0    \
Create a CampCutProc object with the given parameters.\
\

\b campstream 
\b0 - A CampStream object to represent the permutation sequence for this change ringing.\

\b phraselength 
\b0 - when value is called on it, next length of phrase in beats.\
\

\b \ul Instance Methods
\b0 \ulnone \
\

\b initCampCutProc 
\b0 Called internally after a new.\
\

\b chooseblock
\b0 - this uses the setoffset method of BBCutSynth to specify offset jumps relative to the\
current phrase size. In normal use phrasesize will be the same as the beat length of the source you wish \
to permute. Note that sources which don't respond to setoffset will not be effected by CampCutProc except\
for any enveloping/panning etc caused by blocks. \
\
Examples- Substitute your own break sample to hear this properly\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720

\f1\fs18 \cf0 (	\cf2 //test with gentle subtle changes...\
\cf3 var\cf0  sf;\
\cf3 var\cf0  pdata,method,campstream;\
\
sf= \cf3 SF3\cf0 (\cf4 nil\cf0 , 4);\
\
\cf2 //Gainsborough Little Bob Major\
\cf0 \
pdata = [[0, 2, 4, 6], [1, 3, 5], [1, 3, 6], [2, 4, 6], \cf3 Array\cf0 .new(0)];\
\
\cf2 //add dummy initial so starts with unpermuted peel\
\cf0 method= \cf3 Pseq\cf0 ([\cf3 Pseq\cf0 ([4],1),\cf3 Pseq\cf0 ([0,1,0,1,0,2,0,1,0,1,0,3],\cf3 inf\cf0 )],1).asStream;\
\
campstream = \cf3 CampStream\cf0 .new(pdata,method,8);\
\
\cf3 BBCut\cf0 (\cf3 BBCutSynthSF\cf0 (sf), \cf3 CampCutProc\cf0 .new(campstream, 4.0)).tempo_(1.5).go;\
)
\fs24 \
\

\fs18 (	\cf2 //a different change ringing composition\
\cf3 var\cf0  sf;\
\cf3 var\cf0  pdata,method,campstream;\
\
sf= \cf3 SF3\cf0 (\cf4 nil\cf0 ,8);\
\
\cf2 //Ashtead Surprise Major\
//x.58.x.56.x.56.x.36.x.34.x.38.x.34.x.78.x.34.x.38.x.34.x.36.x.56.x.56.x.58.x.12(8)\
\cf0 \
pdata=[[0,2,4,6],[0,2,5],[0,2,6],[0,3,6],[0,4,6],[0,3,5],[0,2,4],[2,4,6],\cf3 Array\cf0 .new(0)];\
method= \cf3 Pseq\cf0 ([\cf3 Pseq\cf0 ([8],1),\cf3 Pseq\cf0 ([0,1,0,2,0,2,0,3,0,4,0,5,0,4,0,6,0,4,0,5,0,4,0,3,0,2,0,2,0,1,0,7],\cf3 inf\cf0 )],1).asStream;\
campstream= \cf3 CampStream\cf0 .new(pdata,method,8);\
\
\cf3 BBCut\cf0 (\cf3 BBCutSynthSF\cf0 (sf),\cf3 CampCutProc\cf0 .new(campstream,8.0)).tempo_(2.2).go;\
)\
\
\
(	\cf2 //making up a random method, cuts across varying phrase lengths each phrase.\
\cf3 var\cf0  sf;\
\cf3 var\cf0  pdata,method,campstream;\
\
sf= \cf3 SF3\cf0 (\cf4 "a11wlk01.wav"\cf0 ,4);\
\
\cf2 //Ashtead Surprise Major as source material for allowable permutations\
//x.58.x.56.x.56.x.36.x.34.x.38.x.34.x.78.x.34.x.38.x.34.x.36.x.56.x.56.x.58.x.12(8)\
\cf0 \
pdata=[[0,2,4,6],[0,2,5],[0,2,6],[0,3,6],[0,4,6],[0,3,5],[0,2,4],[2,4,6],\cf3 Array\cf0 .new(0)];\
\
\cf2 //choose random indices\
\cf0 method= \cf3 Pseq\cf0 ([\cf3 Pseq\cf0 ([8],1),\cf3 Prand\cf0 ([0,1,2,3,4,5,6,7],\cf3 inf\cf0 )],1).asStream;\
\
campstream= \cf3 CampStream\cf0 .new(pdata,method,8);\
\
\cf3 BBCut\cf0 (\cf3 BBCutSynthSF\cf0 (sf),\cf3 CampCutProc\cf0 .new(campstream,\{[0.5,1.0,2.0].choose\})).tempo_(2.2).go;\
)\
\
\
\
\
////////////\
For additional data on the algorithm see\
Nick Collins, "further automatic BreakBeat cutting methods",\
Proceedings of Generative Art 2001\
reproduced at http://www.axp.mdx.ac.uk/~nicholas15/\
////////////\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720

\f0\fs24 \cf0 \
\
}