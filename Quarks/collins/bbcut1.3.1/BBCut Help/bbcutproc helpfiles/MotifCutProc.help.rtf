{\rtf1\mac\ansicpg10000\cocoartf102
{\fonttbl\f0\fswiss\fcharset77 Helvetica;\f1\fswiss\fcharset77 Helvetica-Bold;\f2\fnil\fcharset77 Monaco;
}
{\colortbl;\red255\green255\blue255;\red191\green0\blue0;\red0\green0\blue191;\red96\green96\blue96;
}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\fs18 \cf0 This file is part of The BBCut Library. Copyright (C) 2001  Nick M.Collins distributed under the terms of the GNU General Public License full notice in file BBCutLibrary.help\

\fs24 \

\f1\b\fs36 MotifCutProc\

\f0\b0\fs24 \

\f1\b Superclass: BBCutProc\

\f0\b0 \
This cut procedure provides an intermediate level of hierachy between a phrase and a block. A motif is \
a short rhythmic cell, represented by nested arrays. A block is taken an array of cuts, for example:\
\
[ 1.0, 1.0, 1.0 ]\
\
being three repeats of 1.0 beats. A motif is an array of blocks:\
\
[ [ 1.0, 1.0, 1.0 ], [ 2.0, 1.5 ] ]\
\
This Motif then lasts 6.5 beats in total. \
The MotifCutProc is passed an array of Motifs, so a twice nested array. An indexing function is also passed\
as the second argument, for selecting the next Motif. If the Motifs don't fit within a phrase, the last rhythmic \
value is shortened to fit. \
\
\

\f1\b \ul Class Methods\

\f0\b0 \ulnone \

\f1\b *new(motiflist, indexfunc, phraselength, bpsd)  
\f0\b0  \
Create a MotifCutProc object with the given parameters.\
\

\f1\b *stringtomotif(string)
\f0\b0  Converts a string in a particular form into a Motif. Used for \
entering Motifs in a StringDialog in live coding. The class method returns a Motif.\
The form uses integers and the the letter 'r' for repeats, and ignores all else. For example\
\
3r4 = [ 3, 3, 3,3 ] 		2r24r1 = [ [ 2, 2 ],  [ 1, 1, 1, 1 ] ]\
\
It would then be converted into beats, by a multiplier like 0.5, 0.25. \
\
This method is unnecessary since you can go "[1.5]".interpret...\
\
\

\f1\b \ul Instance Methods\

\f0\b0 \ulnone \

\f1\b initBBCutProc11(ml, if)
\f0\b0  Called internally after a new.\
\
Examples-\
\

\f2\fs18 (	\cf2 //default index function (free random choice)\cf0 \
\cf3 var\cf0  sf;\
sf= \cf3 SF3\cf0 (\cf4 "break"\cf0 ,8);\
\
\cf3 BBCut\cf0 (\cf3 BBCutSynthSF\cf0 (sf),\cf3 MotifCutProc\cf0 .new(\
[			\cf2 //array of Motifs\cf0 \
[[1.0,1.0,1.0], [0.25, 0.25, 0.5]],	\cf2 //first Motif	\cf0 \
[[0.5, 0.5], [0.33, 0.33, 0.34]]	\cf2 //second Motif\cf0 \
]\
)).tempo_(2.4).go;\
\
)\
\
\
(	\cf2 //changing the motiflist gradually as you go\cf0 \
\cf3 var\cf0  sf, motiflist;\
sf= \cf3 SF3\cf0 (\cf4 "break"\cf0 ,8);\
\
motiflist=[[[0.5,0.5],[0.25,0.25],[0.5]]]; \
\
\cf3 BBCut\cf0 (\cf3 BBCutSynthSF\cf0 (sf),\cf3 MotifCutProc\cf0 .new(\
motiflist, 0,\
\{	\cf2 //phraselength function called once a phrase, change motiflist then\cf0 \
\
motiflist.do(\{\
\cf3 arg\cf0  motif,i; \
\
motif.do(\{\
\cf3 arg\cf0  block,j;\
\
block.do(\{\cf3 arg\cf0  cutsize,k; \
\
cutsize= if(cutsize>0.125, \
\{cutsize*([0.5,1,2].wchoose([0.25, 0.5, 0.25]))\},\
\{cutsize*(2**(3.rand));\});\
\
motiflist.at(i).at(j).put(k, cutsize);\
\});\
\});\
\
\});\
\
8.0\
\}\
)).tempo_(2.4).go;\
)\
\
\
\cf2 //live coding changing of motifs\cf0 \
\
(	\
\cf3 var\cf0  sf;\
\
sf= \cf3 SF3\cf0 (\cf4 "break"\cf0 ,8);\
\
m=[[[0.5,0.5],[0.25,0.25],[0.5]]]; \
\
\cf3 BBCut\cf0 (\cf3 BBCutSynthSF\cf0 (sf),\cf3 MotifCutProc\cf0 .new(m, \{m.size.rand\},8.0)).tempo_(2.4).go;\
)\
\
\cf2 //changing the motiflist as you go\cf0 \
m.put(0,[[0.25,0.25],[1.0],[0.5]]);\
\
m.add([[1.0,0.5],[0.5,1.0]]);\
\
m.add([[0.33,0.33,0.34,0.34,0.33,0.11,0.11,0.11]]);\
\
\
\cf2 //\cf0 \
\cf2 ////GetStringDialog not working well enough to bother converting this at the moment\cf0 \
\cf2 ////SCTextField has no arrow key, editing capabilities, only allows one text entry\cf0 \
\cf2 ////must get it right first time...\cf0 \
\cf2 //(//ui for choosing Motifs live\cf0 \
\cf2 ////you need the MotifUI class\cf0 \
\cf2 //var sf,slid;\cf0 \
\cf2 //var maxMotifs;\cf0 \
\cf2 //var w,array,which,button,resolutionslid,stringviews;\cf0 \
\cf2 //var resolutions;\cf0 \
\cf2 //var temp,index;\cf0 \
\cf2 //\cf0 \
\cf2 //sf= SF3("break",8);\cf0 \
\cf2 //\cf0 \
\cf2 //maxMotifs=10;\cf0 \
\cf2 //\cf0 \
\cf2 //resolutions=[0.25,0.5,0.75,1.0];\cf0 \
\cf2 //\cf0 \
\cf2 //array=Array.fill(maxMotifs,\{[[8.0]]\});\cf0 \
\cf2 //\cf0 \
\cf2 //w=GUIWindow.new("MotifUI",Rect.newBy(100,100,500,100+(30*maxMotifs)));\cf0 \
\cf2 //\cf0 \
\cf2 //which= DataDisplaySlider.new(w,Rect.newBy(0,0,150,40),"whichtoedit",0,0,maxMotifs-1,1,'linear');\cf0 \
\cf2 //\cf0 \
\cf2 //button= ButtonView.new(w,Rect.newBy(200,0,50,40),"choose",0,0,1,1,'linear');\cf0 \
\cf2 //\cf0 \
\cf2 //resolutionslid= DataDisplaySlider.new(w,Rect.newBy(0,50,150,40),"resolution",0,0,resolutions.size-1,1,'linear');\cf0 \
\cf2 //\cf0 \
\cf2 //resolutionslid.action_(\{resolutionslid.stringview.label_(resolutions.at(resolutionslid.value.round(1.0).asInteger).asString)\});\cf0 \
\cf2 //\cf0 \
\cf2 //resolutionslid.stringview.label_(resolutions.at(0).asString);\cf0 \
\cf2 //\cf0 \
\cf2 //slid=DataDisplaySlider.new(w,Rect.newBy(200,50,200,40),"active index",0,0,9,1,'linear');\cf0 \
\cf2 //\cf0 \
\cf2 //stringviews=Array.fill(maxMotifs,\{\cf0 \
\cf2 //arg i;\cf0 \
\cf2 //\cf0 \
\cf2 //StringView(w,Rect.newBy(0,100+(30*i),500,30),array.at(i).asString);\cf0 \
\cf2 //\});\cf0 \
\cf2 //\cf0 \
\cf2 //button.action_(\{\cf0 \
\cf2 //GetStringDialog.new("getmotif","3r22",\{arg ok,string; \cf0 \
\cf2 //\cf0 \
\cf2 //index=which.value.round(1.0).asInteger;\cf0 \
\cf2 //\cf0 \
\cf2 //temp=MotifCutProc.stringtomotif(string);\cf0 \
\cf2 //\cf0 \
\cf2 ////multiply here by beat proportion\cf0 \
\cf2 //array.put(index,\cf0 \
\cf2 //temp*(resolutions.at(resolutionslid.value.round(1.0).asInteger)));\cf0 \
\cf2 //\cf0 \
\cf2 //stringviews.at(index).label_(array.at(index).asString);\cf0 \
\cf2 //\});\cf0 \
\cf2 //\cf0 \
\cf2 //\});\cf0 \
\cf2 //\cf0 \
\cf2 //\{\cf0 \
\cf2 //thisSynth.tempo_(2);\cf0 \
\cf2 //\cf0 \
\cf2 //BBCut.ar(BBCutSynthParam.easysf(sf,0),MotifCutProc.new(array,\{slid.value.round(1.0).asInteger\}))\cf0 \
\cf2 //\}.play;\cf0 \
\cf2 //\cf0 \
\cf2 //GUIWindow.closeAll;\cf0 \
\cf2 //\cf0 \
\cf2 //)\cf0 \
\cf2 //
\f0\fs24 \cf0 \
\
////////////\
For additional data on the algorithm and it's use under interactive evolution see\
Nick Collins, "Interactive Evolution of Breakbeat Cut Sequences",\
Proceedings of Cybersonica 2002 \
reproduced at http://www.axp.mdx.ac.uk/~nicholas15/\
////////////\
\
\
}