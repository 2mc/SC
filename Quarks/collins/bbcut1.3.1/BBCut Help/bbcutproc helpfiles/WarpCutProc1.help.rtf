{\rtf1\mac\ansicpg10000\cocoartf102
{\fonttbl\f0\fswiss\fcharset77 Helvetica;\f1\fswiss\fcharset77 Helvetica-Bold;\f2\fnil\fcharset77 Monaco;
}
{\colortbl;\red255\green255\blue255;\red191\green0\blue0;\red0\green0\blue191;\red96\green96\blue96;
\red0\green115\blue0;}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\fs18 \cf0 This file is part of The BBCut Library. Copyright (C) 2001  Nick M.Collins distributed under the terms of the GNU General Public License full notice in file BBCutLibrary.help
\f1\b\fs30 \
\
WarpCutProc1
\f0\b0\fs24 \
\

\f1\b Superclass: BBCutProc
\f0\b0 \
\
Cutups in the style of Aphex Twin/ Bogdan Raczynski/ u-ziq  etc, that is, sometimes so fast that a pitch is heard.\
With this procedure you must specifiy the sizes of allowed blocks. Each block then has some probability to\
be a simple statement, or some type of roll (fast set of repetitions), either even or geometric series timed.\
\

\f1\b \ul Class Methods
\f0\b0 \ulnone \
\
*
\f1\b new(blocksizefunc, rollfunc, probs, phraselength, accel, bpsd)
\f0\b0    \
Create a WarpCutProc1 object with the given parameters.\
\

\f1\b blocksizefunc
\f0\b0  - A function (or something else responding to value) returning the next block size.  The function\
will be passed the number of beatsleft in the current phrase, and the current phrase length in case judgement\
is to depend on position within a phrase.\

\f1\b rollfunc 
\f0\b0 - A function returning the number of cuts to subdivide a block in a roll. This function is passed the\
current blocklength as argument in case you want a decision to take account of how much space you divide.\

\f1\b probs 
\f0\b0 - An array of three probabilities (0.0 to 1.0). They are [prob of simple statement, prob of even roll, \
prob of accelerando rather than decelerando geometric series]. The algorithm cascades through one prob \
at a time. If a block is not simple, then it is a roll. If it isn't an even roll it is a geometric roll. \

\f1\b phraselength 
\f0\b0 - Next length of phrase in beats.\

\f1\b accel
\f0\b0  -a parameter to control the acceleration rate of the geometric series. Good values are 0.5 to 0.99.\
Do not pass 0.0 or 1.0 without expecting a crash.\

\f1\b bpsd
\f0\b0  - beats per sub division. Sets a primitive cut size resolution for choose offset messages. \
\

\f1\b \ul Instance Methods
\f0\b0 \ulnone \
\

\f1\b initWarpCutProc1 
\f0\b0 Called internally after a new.\
\
Other methods are overrides of BBCutProc base class behaviour. WarpCutProc1 will flag rolls for synthesis.\
\
Examples- You'll have to substitute your own break sample to hear the rhythmic aspects of this procedure\
properly perhaps, but the Warp cutter creates such bizarre effects that it's fun on any source. \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2\fs18 \cf0 (	\cf2 //defaults\cf0 \
\cf3 var\cf0  sf;\
sf= \cf3 SF3(\cf0 "a11wlk01.wav",4);\
\
\cf2 //144 bpm\cf0 \
\cf3 BBCut\cf0 (\cf3 BBCutSynthSF\cf0 (sf),\cf3 WarpCutProc1\cf0 .new).tempo_(2.4).go;\
)
\fs24 \
\

\fs18 (	\cf2 //oddness on AudioIn\cf0 \
\cf3 BBCut\cf0 (\cf3 BBCSAudioIn\cf0 (\cf3 1\cf0 ),\cf3 WarpCutProc1\cf0 .new(\{[1,2,4].wchoose([0.7,0.2,0.1])\},\{[9,19,29].choose\},[0.0,0.5,0.5],100.0,\{0.8+(0.15.rand)\})).tempo_(2.2).go; \
)
\fs24 \
\

\fs18 \
\cf2 //using ChooseBlockProc to roll through a sound with UI control\
\cf0 (\
\cf3 var\cf0  w;\
\cf3 var\cf0  slider, num, data;\
\cf3 var\cf0  sf, bbcutter;\
\
data=	\cf2 //control spec data for ui controls\cf0 \
[\
[\cf4 "tempo"\cf0 ,2,3,\cf5 \\lin\cf0 ,0.1,2.5],				\
[\cf4 "blocklength"\cf0 , 0, 2,\cf5 \\lin\cf0 ,1,1],			\
[\cf4 "roll"\cf0 , 0, 6,\cf5 \\lin\cf0 ,1,0],				\
[\cf4 "simpleprob"\cf0 , 0.0, 1.0,\cf5 \\lin\cf0 ,0.1,0.5],	\
[\cf4 "evenprob"\cf0 , 0.0, 1.0,\cf5 \\lin\cf0 ,0.1,0.5],		\
[\cf4 "accelprob"\cf0 , 0.0, 1.0,\cf5 \\lin\cf0 ,0.1,0.5],		\
[\cf4 "phraselength"\cf0 , 1.0, 5.0,\cf5 \\lin\cf0 ,1.0,2.0],		\
[\cf4 "accelparam"\cf0 , 0.5, 0.99,\cf5 \\lin\cf0 ,0.01,0.9],		\
[\cf4 "restchance"\cf0 , 0.0, 1.0,\cf5 \\lin\cf0 ,0.1,0.0],		\
[\cf4 "ampvariation"\cf0 , 0.0, 1.0,\cf5 \\lin\cf0 ,0.01,1.0],		\
[\cf4 "panvariation"\cf0 , 0.0, 1.0,\cf5 \\lin\cf0 ,0.01,0.0],		\
[\cf4 "randomoffset"\cf0 , 0.0, 1.0,\cf5 \\lin\cf0 ,0.01,0.0]\
];\
\
w = \cf3 SCWindow\cf0 (\cf4 "WarpCutProc1 demo N.M.Collins 23/08/03"\cf0 , \cf3 Rect\cf0 .new(100, 500, 500, (30*(data.size))));\
\
slider= \cf3 Array\cf0 .fill(data.size, \{\cf3 arg\cf0  i; \cf3 DDSlider\cf0 .performList(\cf5 \\new\cf0 ,[w, \cf3 Rect\cf0 (5,30*i, 300, 30)]++ data.at(i))\}); \
\
slider.at(1).slider.action_(\{\cf3 arg\cf0  sl; \
\cf3 var\cf0  val; val = slider.at(1).spec.map(sl.value);\
val= [1,3,5].at(val.round(1.0).asInteger);\
slider.at(1).string.string_(val); \
slider.at(1).lastval=val;  \
\});\
\
slider.at(1).lastval= 3;\
slider.at(2).string.string_(3);\
\
slider.at(2).slider.action_(\{\cf3 arg\cf0  sl; \
\cf3 var\cf0  val; val = slider.at(2).spec.map(sl.value);\
val= [3,5,7,11,13,17,19].at(val.round(1.0).asInteger);\
slider.at(2).string.string_(val); \
slider.at(2).lastval=val;  \
\});\
\
slider.at(2).lastval= 3;\
slider.at(2).string.string_(3);\
\
w.front;\
\
sf= \cf3 SF3\cf0 (\cf4 "break"\cf0 ,8);\
\
\cf3 bbcutter= BBCut\cf0 (\cf3 BBCutSynthSF\cf0 (sf,\
slider.at(11), \cf2 //randomoffsetchance\cf0 \
\{\
if(slider.at(8).value.coin,	\cf2 //restchance\cf0 \
\{0\},\
\{\
rrand(slider.at(9).value,1.0)\} \cf2 //amp variation\cf0 \
)\},	\
\{rrand(-1.0*(slider.at(10).value),slider.at(10).value)\}	\cf2 //panvariation\cf0 \
),\
\cf3 WarpCutProc1\cf0 .new(\
slider.at(1),	\cf2 //block\cf0 \
slider.at(2),	\cf2 //rollcut\cf0 \
[slider.at(3),slider.at(4),slider.at(5)],	\cf2 //probs\cf0 \
slider.at(6),	\cf2 //phraselength\cf0 \
slider.at(7)	\cf2 //accelparam\cf0 \
)\
); \
\
bbcutter.tempo_(slider.at(0).lastval).go; \
\
\cf2 //update tempo twenty times a second\cf0 \
\cf3 SystemClock\cf0 .sched(0.0,\{bbcutter.tempo_(slider.at(0).lastval); 0.05\});\
\
)\
\
\
////////////\
For additional data on the algorithm see\
Nick Collins, "further automatic BreakBeat cutting methods",\
Proceedings of Generative Art 2001\
reproduced at http://www.axp.mdx.ac.uk/~nicholas15/\
////////////\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\fs24 \cf0 \
\
}