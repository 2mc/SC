{\rtf1\mac\ansicpg10000\cocoartf102
{\fonttbl\f0\fswiss\fcharset77 Helvetica;\f1\fswiss\fcharset77 Helvetica-Bold;\f2\fswiss\fcharset77 Helvetica-Oblique;
\f3\fnil\fcharset77 Monaco;}
{\colortbl;\red255\green255\blue255;\red191\green0\blue0;\red0\green0\blue191;\red96\green96\blue96;
}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\fs18 \cf0 This file is part of The BBCut Library. Copyright (C) 2001  Nick M.Collins distributed under the terms of the GNU General Public License full notice in file BBCutLibrary.help\

\f1\b\fs30 \
BBCPPermute
\f0\b0\fs24 \
\

\f1\b Superclass: BBCutProc
\f0\b0 \
\
A relatively straight forward cut procedure supporting arbitrary user defined permutation of equally\
divided chunks of the target. Will only work where a BBCutSynth supports the setoffset method.\

\f1\b \ul Class Methods
\f0\b0 \ulnone \
\
*
\f1\b new(phraselength, subdivfunc, permutefunc, stutterfunc)
\f0\b0    \
Create a BBCPPermute object with the given parameters.\
\

\f1\b phraselength
\f0\b0  - Choose a new phraselength. You can pass a function, which will be called at \
each new phrase. Normally this would be equal to the size in beats of the source to be cut (assuming \
some fixed signal buffer, sound file) \

\f1\b subdivfunc 
\f0\b0 - A function returning the number of equally spaced divisions in which to split a new phrase. \
The new currphraselength is passed as an argument to your function. \

\f1\b permutefunc 
\f0\b0 - Some mapping function which permutes the normal playback order of slices. \
If it returned the index passed in, there would be no swapping of chunks of the sample around. \
Your arbitrary permutation function is passed the index to permute, the current number of subdivisions for the \
phrase, and the current position in the phrase. If you return values out of range, they'll be put into range for you.\

\f1\b stutterfunc 
\f0\b0 - A function returning the number of subdivisions for the next 
\f2\i block
\f0\i0 . The default is one, giving no stuttering.\
Arguments passed in are the index, the subdivisions , and the position in beats in the current phrase. \
\

\f1\b \ul Instance Methods
\f0\b0 \ulnone \
\

\f1\b initBBCPPermute(pl, sdf, pf, sf) 
\f0\b0 Called internally after a new.\
\
Other methods are overrides of BBCutProc base class behaviour. BBCPPermute will flag a roll when stuttering.\
\
Examples- You'll have to substitute your own break sample to hear the rhythmic aspects of this procedure\
properly\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f3\fs18 \cf0 (	\cf2 //default, getting back what you put in, give or take some enveloping\cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf3 var\cf0  sf;\
sf= \cf3 SF3\cf0 (\cf4 "break"\cf0 ,8);\
\
\cf3 BBCut\cf0 (\cf3 BBCutSynthSF\cf0 (sf),\cf3 BBCPPermute\cf0 (8.0)).tempo_(2.4).go;\
)
\fs24 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\fs18 \cf0 \
\
(	\cf2 //reverse slices, 16 slices over 8 beat sample= eighth note (0.5 beat) slices\cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf3 var\cf0  sf;\
sf= \cf3 SF3\cf0 (\cf4 "break"\cf0 ,8);\
\
\cf3 BBCut\cf0 (\cf3 BBCutSynthSF\cf0 (sf),\cf3 BBCPPermute\cf0 .new(8.0, 16, \{\cf3 arg\cf0  index, n;  n-index-1\})).tempo_(2.4).go;\
)
\fs24 \
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\fs18 \cf0 (	\cf2 //swap strong and weak, with occasional stuttering every fourth block\cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf3 var\cf0  sf;\
sf= \cf3 SF3\cf0 (\cf4 "break"\cf0 ,8);\
\
\cf3 BBCut\cf0 (\cf3 BBCutSynthSF\cf0 (sf),\
\cf3 BBCPPermute\cf0 .new(\
8.0,	\cf2 //phrase length same as sample length \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf0 16, 	\cf2 //cut in eight notes- 8.0/16= 0.5...\
\cf0 \{\cf3 arg\cf0  index, n;  if(index%2==0,\{index+1\},\{index-1\})\},	\cf2 //swap strong and weak\
\cf0 \{\cf3 arg\cf0  index; if((index==4) || (index==7), 3, 1)\}\
)).tempo_(2.4).go;\
)\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\fs24 \cf0 \
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\fs18 \cf0 (	\cf2 //more random happenings\cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf3 var\cf0  sf, mult;\
sf= \cf3 SF3\cf0 (\cf4 "break"\cf0 ,8);\
\
\cf3 BBCut\cf0 (\cf3 BBCutSynthSF\cf0 (sf),\
\cf3 BBCPPermute\cf0 .new(\
\{mult= [4.31, 1.29, \{rrand(5.01, 10.09)\}].choose.value;  8.0\}, \cf2 //this is called beginning of every phrase, so use the opportunity to select a new multiplier\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf0 \{[8, 16, 32].choose\}, \
\{\cf3 arg\cf0  index, n;  index*mult\},\
\{if(0.05.coin,\{rrand(2,5)\},1)\}\
)).tempo_(2.4).go;\
)\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\fs24 \cf0 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\fs18 \cf0 (	\cf2 //granular mess\cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf3 var\cf0  sf, pitch, when, now, duty;\
\cf3 var\cf0  bbcs, bbcp, bbcutter;\
\
sf= \cf3 SF3\cf0 (\cf4 "a11wlk01.wav"\cf0 ,4);\
\
pitch=1.0;\
when= 0;\
now=0;\
\
bbcs= [BBCSFilter1.new,\
\cf3 BBCutSynthSF\cf0 (sf, \
pbsfunc: \{ if(now>=when,\{pitch= ([0.125, 1, 1.05].choose)+ (0.05.rand2)\}); pitch+(0.01.rand2)\}, \
panfunc:\{1.0.rand2\},\
dutycycle:\{ if(now>=when, \{now=0; when= 300.rand; duty= rrand(0.2,10.0)*(rrand(0.5,1.0))\}); now=now+1; duty\}\
)\
];\
\
\
bbcp=\cf3 BBCPPermute\cf0 .new(\
\{rrand(1.0,10.0)*(rrand(0.5, 1.0))\}, \cf2 //weird phrase lengths only\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf0 \{rrand(1, 7)*8-1\}, \cf2 //subdivisions always odd\
\cf0 \{\cf3 arg\cf0  index, n;  (2.7*n*n*index)+(12.2.rand2)\},\
\{if(0.35.coin,\{rrand(2,5)\},1)\}\
);\
\
bbcutter= BBCut(bbcs,bbcp).tempo_(5.4).go;\
\
\
SynthDef("fx", \{ReplaceOut.ar(0,\cf3 Limiter\cf0 .ar(0.1*\cf3 CombN\cf0 .ar(\cf3 In.ar(0, 2)\cf0 ,0.3,\cf3 SinOsc\cf0 .kr(0.05, 0, 0.15, 0.15), \cf3 SinOsc\cf0 .kr(0.023, 0, 0.5, 0.6))))  \}).play;\
\
)\
\
\
\cf2 //ui controlling rotation and inversion of slices - ie, move within a rhythmic set class\
//break2 is reference\
\cf0 (\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf3 var\cf0  w, rotate, invert, currrot, currinv;\
\cf3 var\cf0  sf;\
\
sf= \cf3 SF3\cf0 .array([\cf4 "break"\cf0 ,\cf4 "break2"\cf0 ],[8,4]);\
\
w = \cf3 SCWindow\cf0 (\cf4 "BBCPPermute demo N.M.Collins 22/08/03"\cf0 , \cf3 Rect\cf0 (100, 100, 100, 100));\
\
rotate= \cf3 SCSlider\cf0 (w, \cf3 Rect\cf0 (0,0,100,30), \cf4 "rotation"\cf0 ); \
invert= \cf3 SCButton\cf0 (w, \cf3 Rect\cf0 (0,50,100,30), \cf4 "invert"\cf0 ); \
\
invert.states= [[\cf4 "invert"\cf0 ],[\cf4 "revert"\cf0 ]];\
rotate.action_(\{currrot= rotate.value;\});\
invert.action_(\{currinv= invert.value;\});\
\
currrot=0.0;currinv=0.0;\
\
w.front;\
\
\cf3 BBCut\cf0 (\cf3 BBCutSynthSF\cf0 (sf.at(0), ampfunc:0.5),\cf3 BBCPPermute\cf0 .new(\
8.0,16,\{\cf3 arg\cf0  i,n; \
\cf3 var\cf0  t; \
t=i+((currrot*16-0.001).asInteger);\
\
if((currinv)>0.1, \{t= n-t-1\});\
\
t%n;\
\}\
)).tempo_(2.4).go;\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf2 //reference break\cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf3 BBCut\cf0 (\cf3 BBCutSynthSF\cf0 (sf.at(1), ampfunc:0.3),\cf3 BBCPPermute\cf0 .new).tempo_(2.4).go;\
\
)\
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf2 //similar using shortcut class\
\cf0 (\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf3 var\cf0  w, rotate, invert, currrot, currinv;\
\cf3 var\cf0  sf;\
\
sf= \cf3 SF3\cf0 .array([\cf4 "break"\cf0 ,\cf4 "break2"\cf0 ],[8,4]);\
\
w = \cf3 SCWindow\cf0 (\cf4 "BBCPPermute demo N.M.Collins 22/08/03"\cf0 , \cf3 Rect\cf0 (100, 100, 100, 100));\
\
rotate= \cf3 SCSlider\cf0 (w, \cf3 Rect\cf0 (0,0,100,30), \cf4 "rotation"\cf0 ); \
invert= \cf3 SCButton\cf0 (w, \cf3 Rect\cf0 (0,50,100,30), \cf4 "invert"\cf0 ); \
\
invert.states= [[\cf4 "invert"\cf0 ],[\cf4 "revert"\cf0 ]];\
rotate.action_(\{currrot= ((rotate.value*16)-0.001).asInteger;\});\
invert.action_(\{currinv= invert.value;\});\
\
currrot=0;currinv=0.0;\
\
w.front;\
\
\cf3 PermuteCut\cf0 .rotator(sf.at(0), 8.0, 16, \{currrot\}, \{currinv\}, ampfunc:0.5).tempo_(2.7).go;\
\cf3 PermuteCut\cf0 (sf.at(1), stutterfunc:2, ampfunc:0.3).tempo_(2.7).go;\
)\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf2 \
\cf0 \
\cf2 //live coding of new permutation functions as you go along\cf0 \
(\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf3 var\cf0  sf;\
\
sf= \cf3 SF3\cf0 (\cf4 "break"\cf0 ,8);\
\
~permutefunc=\{\cf3 arg\cf0  i,n; i%n\};\
\
\cf3 PermuteCut\cf0 (sf, 8.0, 16, \{\cf3 arg\cf0  i,n; ~permutefunc.value(i,n)\}, ampfunc:0.5).tempo_(2.7).go;\
)\cf2 \
\
//now change the permutation function as desired\cf0 \
~permutefunc= \{\cf3 arg\cf0  i,n; (((i+5).rand)**(i.min(7)))%n\};\
\
~permutefunc= \{\cf3 arg\cf0  i,n; ((i+(i.rand))*(rrand(2,i)))%n\};\
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf2 //windowing example doesn't work very well at the moment, need a better capture string method (text entry is better anyhow)\cf0 \
\cf2 //(\cf0 \
\cf2 //var w, button, permutefunc;\cf0 \
\cf2 //var sf;\cf0 \
\cf2 //\cf0 \
\cf2 //sf= SF3.array(["break","break2"],[8,4]);\cf0 \
\cf2 //\cf0 \
\cf2 //w = SCWindow("BBCPPermute demo N.M.Collins 22/08/03", Rect(100, 100, 100, 100));\cf0 \
\cf2 //\cf0 \
\cf2 //button= SCButton(w, Rect(0,0,100,30));\cf0 \
\cf2 //\cf0 \
\cf2 //button.states= [["interpret"]];\cf0 \
\cf2 //\cf0 \
\cf2 //permutefunc=\{arg i,n; i%n\};\cf0 \
\cf2 //\cf0 \
\cf2 //button.action_(\{\cf0 \
\cf2 //var temp,temp2; //should be source\cf0 \
\cf2 //\cf0 \
\cf2 //GetStringDialog.new("enter new function","\{arg i,n; i%n\}",\{arg ok,str;\cf0 \
\cf2 //str.postln;\cf0 \
\cf2 //\cf0 \
\cf2 //permutefunc=str.interpret;\cf0 \
\cf2 //\}\cf0 \
\cf2 //);\cf0 \
\cf2 //\});\cf0 \
\cf2 //\cf0 \
\cf2 //w.front; \cf0 \
\cf2 //\cf0 \
\cf2 //PermuteCut(sf.at(0), 8.0, 16, \{arg i,n; permutefunc.value(i,n)\}, ampfunc:0.5).tempo_(2.7).ar;\cf0 \
\cf2 //PermuteCut(sf.at(1), ampfunc:0.5,stutterfunc:4).tempo_(2.7).ar;\cf0 \
\cf2 //)\cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\fs24 \cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0 \cf0 \
\
}