{\rtf1\mac\ansicpg10000\cocoartf102
{\fonttbl\f0\fswiss\fcharset77 Helvetica;\f1\fswiss\fcharset77 Helvetica-Bold;\f2\fnil\fcharset77 Monaco;
}
{\colortbl;\red255\green255\blue255;\red191\green0\blue0;\red0\green0\blue191;\red96\green96\blue96;
}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\fs18 \cf0 This file is part of The BBCut Library. Copyright (C) 2001  Nick M.Collins distributed under the terms of the GNU General Public License full notice in file BBCutLibrary.help
\f1\b\fs30 \
\
RecCutProc
\f0\b0\fs24 \
\

\f1\b Superclass: BBCutProc
\f0\b0 \
\
This class is an initial attempt at recursive cutting. Recursion can be obtained simply by recording the \
output of a breakbeat cutter then cutting up that audio again. Iterate to acheive any desired level of recursion.\
However, we may also calculate analytically the cuts on an existing cut sequence, as this class demonstrates.\
The usage is in providing a set of variations on a cut sequence 'theme'. \
   The auxilliary class for this is 
\f1\b RCutData
\f0\b0  which stores the source sequences of durations and offsets\
and the desired set of cut durations in which to recursively cut them up. RCutData processes a new\
variation with each call to offsetseq, returning a [duration, offset] pair sequence of blocks. There is no\
further subdivision of blocks. Because we are assuming offset information in this cutter, it will only\
have a real effect (apart from say block enveloping) on bbcutsynths that respond to the setoffset message.\
Note that quantisation is assumed- the offset positions and durations and in multiples of a primitive unit,\
calculated in beats as the current phrase length divided by the number of units in a phrase.\
   It is certainly possible to think of many extensions to the processing involved here, involving many functions \
to make choices of second order cuts, recursion to third level over very large phrase sizes, avoidance of a \
basic unit but simply duration in beats/offset proportion data, etc but the class stands as\
a proof of concept. The alert reader will surely notice that the data which has to be given to RCutData \
could be simplified, letting the computer do more work! But that is not important for this preliminary version.\
\
For the much more powerful updated version see RecursiveCutProc1.\
\

\f1\b \ul Class Methods
\f0\b0 \ulnone \
\
*
\f1\b new(rcd, phraselength)
\f0\b0    \
Create a RecCutProc object with the given parameters.\
\

\f1\b rcd 
\f0\b0 - A RCutData object giving the first level cut data and the second level desired cuts.\

\f1\b phraselength 
\f0\b0 - Next length of phrase in beats.\
\

\f1\b \ul Instance Methods
\f0\b0 \ulnone \
\

\f1\b initRecCutProc 
\f0\b0 Called internally after a new.\
\

\f1\b chooseblock
\f0\b0 - this uses the setoffset method of BBCutSynth to specify offset jumps relative to the\
current phrase size. In normal use phrasesize will be the same as the beat length of the source you wish \
to cut up. Note that sources which don't respond to setoffset will not be effected by RecCutProc except\
for any enveloping/panning etc caused by blocks. \
\
Examples- \

\f2\fs18 \
(		\cf2 //testing RecCutProc\
\cf3 var\cf0  sf;\
\cf3 var\cf0  rcdat;\
\
sf= \cf3 SF3\cf0 (\cf4 "break"\cf0 ,8);\
\
\cf2 //argument 1-cut positions, 16 is wraparound, necessary for calculating differences\
//arg 2- offsets at any given of the 16 quantised positions along the sample length\
//arg 3- but cut up choosing blocks of size 3, 4, etc units (units must total 16 here)\
//units are taken across phraselength, so with phrase 8.0, one unit= 8.0/16= 0.5 = eighth notes \
\cf0 rcdat= \cf3 RCutData\cf0 .new([0,4,7,10,12,15,16],[0,1,2,3, 4,5,6, 3,4,5, 8,9, 7,8,10, 10],[3,4,1,5,3]);\
\
\cf3 BBCut\cf0 (\cf3 BBCutSynthSF\cf0 (sf,panfunc:\{0.7.rand2\}),\cf3 RecCutProc\cf0 .new(rcdat,8.0)).tempo_(2.3).go; \
\
)\
\
\
\
////////////\
For additional data on the algorithm see\
Nick Collins, "further automatic BreakBeat cutting methods",\
Proceedings of Generative Art 2001\
reproduced at http://www.axp.mdx.ac.uk/~nicholas15/\
////////////\

\f0\fs24 \
\
}