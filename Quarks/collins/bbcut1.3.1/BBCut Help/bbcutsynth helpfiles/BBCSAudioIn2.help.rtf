{\rtf1\mac\ansicpg10000\cocoartf102
{\fonttbl\f0\fswiss\fcharset77 Helvetica;\f1\fswiss\fcharset77 Helvetica-Bold;\f2\fnil\fcharset77 Monaco;
}
{\colortbl;\red255\green255\blue255;\red191\green0\blue0;\red0\green0\blue191;\red96\green96\blue96;
\red0\green115\blue0;}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\fs18 \cf0 This file is part of The BBCut Library. Copyright (C) 2001  Nick M.Collins distributed under the terms of the GNU General Public License full notice in file BBCutLibrary.help\

\f1\b\fs30 \
BBCSAudioIn2
\f0\b0\fs24 \
\

\f1\b Superclass: BBCSAudioIn
\f0\b0 \
\
BBCutSynth class for the audio source being an audio stream, like audio in or any other current running audio source. Removes the limitation of BBCutSynthAudioIn by setting up a circular record buffer and keeping track of the current write position. Offsetting is then allowed with respect to some reference into the buffer. There are currently three modes: the default mode 0 is offsetting into the immediate past. Optionally, you may offset forwards from the write position at the beginning of each new phrase. Mode 1 allows unrestricted forwards offsetting, which may access data from previous phrases if the write head hasn't got there yet! Mode 2 is safer and only allows offsets into data recorded so far this phrase. Note that if the buffer length isn't bigger than the phrase length, there will be eventual overwrite anyway. The user can set the operating area for offsetting in beats, the actual referenced data changing with the tempo. Theoretically, a person singing in time with the beat should be cut up in sync with the beat, with old offsetted data replayed being accurate to the beat as well. \
\

\f1\b \ul Class Methods
\f0\b0 \ulnone \
\

\f1\b *new(channel=1,beatsintopast=4.0,randomoffset=0.0,mode=0,buflength=4,ampfunc, panfunc, pbsfunc, dutycycle, atkprop, relprop, curve, offsetshiftfunc)\

\f0\b0 \
Most of these parameters are inherited functionality- see BBCSAudioIn and BBCSParam\
\

\f1\b beatsintopast
\f0\b0  - defaults to 4.0 beats, but you can set up whatever constant or function you desire\

\f1\b randomoffset
\f0\b0  - chance of offsetting, from 0.0 to 1.0\

\f1\b mode
\f0\b0  - There are currently three possible settings. In mode 0 offsets are into the past from the time now.\
In mode 1,  offsets are into the future from the time recorded at the start of the current phrase. Whether\
this means you offset into old audio from a previous phrase or just within the current phrase depends\
on how much of the current phrase has happened yet.  Mode 2 is the same as mode 1 but trys to prevent\
accessing any old audio, only allowing jumping within audio recorded so far this phrase. \
You could pass a function here like \{3.rand\}\

\f1\b buflength 
\f0\b0 - defaults to a 4 second record buffer. You must ensure there is enough buffer to\
cover the beatsintopast at the operating tempo range of your work, if you expect sensible operation. \
\

\f1\b *newOnBus(bus=0,beatsintopast=4.0,randomoffset=0.0,mode=0,buflength=4,ampfunc, panfunc, pbsfunc, dutycycle, atkprop, relprop, curve, offsetshiftfunc)\

\f0\b0 \
Normal bus nubering, not the AudioIn channels way, otherwise exactly the same.\
\

\f1\b \ul Instance Methods
\f0\b0 \ulnone \
\

\f1\b initBBCSAudioIn2
\f0\b0 \
\

\f1\b setup
\f0\b0 \
\

\f1\b synthesisecut\
\
updatephrase\
\
chooseoffset\
\
setoffset\
\

\f0\b0 \
Examples- \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2\fs18 \cf0 (			\cf2 //default- should be the same as BBCutSynthAudioIn\cf0 \
\cf3 BBCut\cf0 (\cf3 BBCSAudioIn2\cf0 ([1])).tempo_(2).go\
)\
\
(			\cf2 //default- should be the same as BBCutSynthAudioIn\cf0 \
\cf3 BBCut\cf0 (\cf3 BBCSAudioIn2.newOnBus\cf0 (8)).tempo_(2).go\
)\
\
(		\cf2 //testing singing in time and having it repeat accurately\cf0 \
\cf3 var\cf0  w,slider;\
	\
w = \cf3 SCWindow\cf0 (\cf4 "panel"\cf0 , \cf3 Rect\cf0 .new(128, 64, 186, 90));\
slider=\cf3 DDSlider\cf0 ( w, \cf3 Rect\cf0 .new(32, 28, 128, 40), \cf4 "random offset"\cf0 , 0.0, 1.0, \cf5 'linear'\cf0 , 0.01, 0.0);\
\
w.front;	\
\
\{\cf3 Decay2\cf0 .ar(\cf3 Impulse\cf0 .ar(2), 0.01, 0.1, \cf3 SinOsc\cf0 .ar(440, 0, 0.5))\}.play;\
\
\cf3 BBCut\cf0 (\cf3 BBCSAudioIn2\cf0 (1, 4.0, slider, 0, 2.0)).tempo_(2).go;\
)\
\
\
\
(	\cf2 //using mode 2 to apply CampCutProc to offsetted audio in- \cf0 \
	\cf2 //compare mode 1 when old data sneaks in from old phrases\cf0 \
\cf3 var\cf0  pdata,method,campstream;\
\cf3 var\cf0  w,mode;\
\
\cf2 //Gainsborough Little Bob Major\cf0 \
\
pdata=[[0,2,4,6],\
[1,3,5],\
[1,3,6],\
[2,4,6],\
\cf3 Array\cf0 .new(0)\
];\
\
\cf2 //add dummy initial so starts with unpermuted peel\cf0 \
method= \cf3 Pseq\cf0 ([\cf3 Pseq\cf0 ([4],1),\cf3 Pseq\cf0 ([0,1,0,1,0,2,0,1,0,1,0,3],\cf3 inf\cf0 )],1).asStream;\
\
campstream= \cf3 CampStream\cf0 .new(pdata,method,8);\
	\
w = \cf3 SCWindow\cf0 (\cf4 "panel"\cf0 , \cf3 Rect\cf0 .new(128, 64, 186, 90));\
mode=\cf3 DDSlider\cf0 ( w, \cf3 Rect\cf0 .new(32, 28, 128, 40), \cf4 "mode"\cf0 , 1, 2, \cf5 'linear'\cf0 , 1, 1);\
\
w.front;	\
\
\{\cf3 Decay2\cf0 .ar(\cf3 Impulse\cf0 .ar(2), 0.01, 0.1, \cf3 SinOsc\cf0 .ar(440, 0, 0.5))\}.play;\
\
\cf3 BBCut\cf0 (\cf3 BBCSAudioIn2\cf0 (1, mode: \{mode.value.round(1.0).asInteger\}),\cf3 CampCutProc\cf0 (campstream,4.0)).tempo_(2).go;\
\
)\
\
\
\
\cf2 //weirder mucking with sound\cf0 \
(\
\cf3 var\cf0  bbcutter;\
\
bbcutter=\cf3 BBCut\cf0 (\cf3 BBCSAudioIn2\cf0 (1,\{[2.0,3.0,4.0,5.0].choose\},mode: 0),\
\cf3 BBCPPermute\cf0 .new(4.0,\{[8,16,32,64].choose\}, [\{\cf3 arg\cf0  index, n;  n-index-1\},\{\cf3 arg\cf0  index, n;  5.rand-index-1\},\{\cf3 arg\cf0  index, n;  index*index-1\}].choose,2.rand+1)\
).tempo_(2);\
\
\cf2 //MouseX tempo control \cf0 \
\cf3 SynthDef\cf0 (\cf4 "mousex"\cf0 , \{\cf3 ReplaceOut\cf0 .kr(10, \cf3 MouseX\cf0 .kr(2,12))\}).play;\
\
\cf3 OSCresponder\cf0 (s.addr, \cf5 '/c_set'\cf0 , \{\cf3 arg\cf0  time, resp, msg;  bbcutter.tempo_(msg.at(2)); \}).add;\
\
bbcutter.go;\
\
\cf2 //must have OSCResponder for c_set, get 10 tempo readings a second\cf0 \
\cf3 SystemClock\cf0 .sched(0.0, \{s.sendMsg(\cf4 "/c_get"\cf0 , 10); 0.1\});\
\
)\
\
\
\
\
\
\cf2 //warp cutting with long memory- buffer is 8 seconds, so phraselength of 16 beats matches this at lowest tempo of 2bps\cf0 \
(\
\cf3 var\cf0  bbcutter, my;\
\
my= 0.0;\
\
bbcutter= \cf3 BBCut\cf0 (\cf3 BBCSAudioIn2\cf0 (1,16.0,\{my.poll\},0, 8.0),\
\cf3 WarpCutProc1\cf0 .new(0.5,\{3.rand+2\},[0.6, 0.7, 0.5],16.0)\
).tempo_(2);\
\
\cf3 SynthDef\cf0 (\cf4 "mice"\cf0 , \{\cf3 ReplaceOut\cf0 .kr(10, \cf3 MouseX\cf0 .kr(2,3));\
\cf3 ReplaceOut\cf0 .kr(11, \cf3 MouseY\cf0 .kr(0.0,1.0))\
\}).play;\
\
\cf3 OSCresponder\cf0 (s.addr, \cf5 '/c_set'\cf0 , \{\cf3 arg\cf0  time, resp, msg;  \
\
if(msg.at(0)==10, \{bbcutter.tempo_(msg.at(2));\}); \
if(msg.at(0)==11, \{my= msg.at(2);\}); \
\
\}).add;\
\
bbcutter.go;\
\
\cf2 //must have OSCResponder for c_set, get 10 tempo readings a second\cf0 \
\cf3 SystemClock\cf0 .sched(0.0, \{s.sendMsg(\cf4 "/c_get"\cf0 , 10);  s.sendMsg(\cf4 "/c_get"\cf0 , 11); 0.1\});\
\
)\
\
\
\
\cf2 //generative piece with recursive audio cutting using BBCSAudioIn2\cf0 \
\cf2 //be careful- may start with a roar due to some problem with the reverb unit \cf0 \
(\
\cf3 var\cf0  sf, tc, n;\
\cf3 var\cf0  source, reccutters, duty;\
sf= \cf3 SF3\cf0 (\cf4 "a11wlk01.wav"\cf0 ,4);\
\
\cf2 //number of levels of recursive audio cutting\cf0 \
\cf2 //be careful, costs go up quickly\cf0 \
n=4; \
\
duty= 1.0; \
\
tc= \cf3 TempoClock\cf0 (2.6);\
\
source=\cf3 BBCut\cf0 (\cf3 BBCG\cf0 ([\cf3 BBCSFinal\cf0 (0.5, (2*n)+16, \{\cf3 arg\cf0  in;  \
in= \cf3 SinOsc\cf0 .ar(\cf3 SinOsc\cf0 .ar(2.6/32,0,500, 520))*in;\
\cf3 CombN\cf0 .ar(in, 1/5.2, 1/5.2,2.5);\
\}), \
\cf3 BBCutSynthSF\cf0 (sf,0.25,ampfunc:\{[0,0,1].choose\}, panfunc:\{1.0.rand2\}, dutycycle:\{duty\})\
\cf3 //BBCSAudioIn2\cf0 (1,0.1,ampfunc:\{1.0.rand\}, panfunc:\{1.0.rand2\}, dutycycle:\{duty\})\
],outbus:(2*n)+16),\
\cf3 SQPusher1\cf0 (0.3, 3, 0.3, [0.5, 0.0,0.3, 0.0, 0.5, 0.7, 0.8, 0.9, 0.6].scramble),tc);\
\
reccutters= \cf3 Array\cf0 .fill(n);\
\
n.reverseDo(\{\cf3 arg\cf0  i; \
reccutters.put(i, \
\cf3 BBCut\cf0 (\cf3 BBCG\cf0 (\cf3 BBCSAudioIn2\cf0 ([(2*i)+11, (2*i)+12], atkprop:0.02, relprop:0.02, mode: 3.rand),\cf3 nil\cf0 ,(2*i)+16),\
\cf3 BBCPPermute\cf0 .new(4.0, [8,16,32].choose, [\{\cf3 arg\cf0  index, n;  n-index-5.rand\},\{\cf3 arg\cf0  index, n;  index*index*index-index-1\},\{\cf3 arg\cf0  index, n;  index*index-1\}].choose,2.rand+1), tc\
))\
\});\
\
\cf2 //\{Out.ar(0,In.ar(16,2))\}.play;\cf0 \
\
\cf3 SynthDef\cf0 (\cf5 \\reverb\cf0 ,\{\
\cf3 var\cf0  a,c,z,y,in;\
c = 4; \cf2 // number of comb delays\cf0 \
a = 3; \cf2 // number of allpass delays\cf0 \
\
in=0.4*\cf3 In\cf0 .ar(16,2);\
\cf2 // reverb predelay time :\cf0 \
z = \cf3 DelayN\cf0 .ar(in, 0.048,0.047);\
\
\cf2 //for delaytime if want modulation-	//LFNoise1.kr(0.1.rand, 0.04, 0.05)\cf0 \
y=\cf3 Mix\cf0 .arFill(c,\{\cf3 CombL\cf0 .ar(z,0.1,rrand(0.01,0.05),5)\});\
	\
\cf2 // chain of 4 allpass delays on each of two channels (8 total) :\cf0 \
a.do(\{ y = \cf3 AllpassN\cf0 .ar(y, 0.1, [rrand(0.01,0.03),rrand(0.01,0.03)], 0.5) \});\
	\
\cf2 // add original sound to reverb and play it :\cf0 \
\cf3 ReplaceOut\cf0 .ar(0,in+(\cf3 Line\cf0 .kr(0.0,0.15,2.0)*y));\
\}).play;\
\
\cf2 //give it all chance to set up- can do without this, just being safe\cf0 \
\cf3 Task\cf0 (\
\{\
1.0.wait;\
source.go;\
reccutters.reverseDo(\{\cf3 arg\cf0  val; val.go;\});\
\
tc.schedAbs(tc.elapsedBeats, \{duty=[exprand(0.02,0.1),rrand(0.5,1.5)].choose;\
tc.tempo=rrand(1.3, 3.1);\
 17.0;\});\
\cf3 nil\cf0 \
\}).start;\
\
\
)\
\
\
}