{\rtf1\mac\ansicpg10000\cocoartf102
{\fonttbl\f0\fswiss\fcharset77 Helvetica;\f1\fswiss\fcharset77 Helvetica-Bold;\f2\fswiss\fcharset77 Helvetica-Oblique;
\f3\fnil\fcharset77 Monaco;}
{\colortbl;\red255\green255\blue255;\red191\green0\blue0;\red0\green0\blue191;\red191\green0\blue0;
\red0\green0\blue0;\red0\green0\blue191;\red96\green96\blue96;}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\fs20 \cf0 This file is part of The BBCut Library. Copyright (C) 2001  Nick M.Collins distributed under the terms of the GNU General Public License full notice in file BBCutLibrary.help\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\fs24 \cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\b\fs28 \cf0 BBCSAudioIn
\f0\b0\fs24 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\b \cf0 Superclass: BBCSParam
\f0\b0 \
\
Core BBCutSynth class for the audio source being an audio stream, like audio in or any other\
current running audio source. Limitations with using a stream are that offsetting into the future is \
impossible. In this simple implementation there are no overrides of setoffset or chooseoffset. \
Derive classes from this one if you want memory stores other than repeating the previous cut.\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf0 \ul Class Methods\ulnone \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\b \cf0 *initClass\
*new(channel=1,ampfunc, panfunc, pbsfunc, dutycycle, atkprop, relprop, curve, offsetshiftfunc, \
buflength=4, bufbeats=8)  
\f0\b0 \
\

\f1\b channel -
\f0\b0  Array or single value of the audio in busses to cut. these match up to those for the AudioIn class, \
so 1 here is the same as the actual bus Server.local.options.numOutputBusChannels-1+channel. \
[1,2] would get you the stereo ins from your device, [1,2,3,4,5,6,7,8] would be all eight inputs. The class\
attempts to adapt to different numbers of input smoothly. There may be an initial complaint about a Node \
not existing due to Server latency, ignore it.\

\f1\b buflength -
\f0\b0  defaults to a 4 second record buffer, change if you want very long repeats or suchlike.\

\f1\b bufbeats -
\f0\b0  defaults to 8 beats over the record buffer, change if you must, affects nothing at the moment. \
\
All the other arguments are for BBCSParam and get passed through to the subclass. \
\

\f1\b *newOnBus(bus=0,ampfunc, panfunc, pbsfunc, dutycycle, atkprop, relprop, curve, offsetshiftfunc, \
buflength=4, bufbeats=8)  
\f0\b0 \
\
Exactly the same as the *new method except it uses standard Bus numbering rather than AudioIn style.\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf0 \ul Instance Methods\ulnone \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\b \cf0 initBBCSAudioIn\
setup\
synthesisecut\
updateblock\
updatephrase
\f0\b0 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2\i \cf0 Examples- 
\f0\i0 \
\

\f3\fs18 \cf2 //capturing from standard audioin channel 1\cf0 \
(\
\cf3 BBCut\cf0 (\cf3 BBCSAudioIn\cf0 .new, \cf3 SQPusher1\cf0 .new).go;\
)\
\
\cf4 //equivalent using explicit bus numbers 0-7 = default output channels, 8-15 default input\cf5 \
\cf6 BBCut\cf5 (\cf6 BBCSAudioIn\cf5 .newOnBus(8), \cf6 SQPusher1\cf5 .new).tempo_(3.2).go;\
\cf0 \
\
\cf2 //capturing anything at all- run first line for source, then run second for bbcut audio in capture from it\cf0 \
\{\cf3 Out\cf0 .ar(16, \cf3 SinOsc\cf0 .ar(\cf3 SinOsc\cf0 .kr(3.2, 0, 200, 400), 0, 0.1))\}.play\
\
\cf2 //the channel is 9 since I have 8 output busses followed by 8 input. 9 = 16-8+1. \cf0 \
\cf3 BBCut\cf0 (\cf3 BBCSAudioIn\cf0 .new(9), \cf3 SQPusher1\cf0 .new).tempo_(3.2).go;\
\
\
\
\cf2 //run something, controlling execution graph so as soon as the first thing is available, \cf0 \
\cf2 //bbcut will be cutting it\cf0 \
(\
\cf3 var\cf0  grp;\
\
grp=\cf3 Group\cf0 .new;	\cf2 //make a new Group at tail of RootNode\cf0 \
\
\cf2 //if you don't control where this appears, won't work- default target is tail of RootNode Group,\cf0 \
\cf2 //would appear in execution order after the cutter! By forcing it into a preexisting group,\cf0 \
\cf2 //the synth below is guranteed to appear before the bbcut in execution order \cf0 \
\{\cf3 Out\cf0 .ar(16, \cf3 Saw\cf0 .ar(\cf3 SinOsc\cf0 .kr(3.18, 0, 450, 500), 0.1))\}.play(grp);\
\
\cf3 BBCut\cf0 .new(\cf3 BBCG\cf0 (\cf3 BBCSAudioIn\cf0 (9)), \
\cf2 //Group.after(grp) could be passed in to the BBCG, but unnecessary \cf0 \
\cf2 //since default is RootNode.new tail, which would be after grp! \cf0 \
\cf3 BBCutProc11\cf0 .new(phrasebars:1,stutterchance:1.0, stutterspeed:3,stutterarea:0.75)).tempo_(3.2).go;\
)\
\
\
\
\cf2 //run this first to load the samples:\cf0 \
(\
\cf3 var\cf0  filenames, bpsound;\
\
\cf2 //Put in the locations of your samples\cf0 \
filenames= [\cf7 "break"\cf0 ,\cf7 "break2"\cf0 ];\
\cf2 //how many beats in your samples?\cf0 \
bpsound= [8,4];\
\
f= \cf3 Array\cf0 .fill(filenames.size, \{\cf3 arg\cf0  i; \cf3 SF3\cf0 (filenames.at(i), bpsound.at(i))\});\
)\
\
\
(\
\cf2 //specify group for holding Synth which is not immediately created\cf0 \
\{\cf3 Out\cf0 .ar(18, \cf3 SinOsc\cf0 .ar(\cf3 SinOsc\cf0 .kr(1.1, 0, 50, 60), 0, 0.5))\}.play(Group.new);\
\
b= \cf3 BBCut\cf0 .new([\cf3 BBCG\cf0 (\cf3 BBCutSynthSF\cf0 (f.at(1)),\cf3 nil\cf0 ,16)],\cf3 SQPusher1\cf0 .new);\
c= \cf3 BBCut\cf0 .new([\cf3 BBCutSynthSF\cf0 (f.at(0))],\cf3 SQPusher1\cf0 .new);\
d= \cf3 BBCut\cf0 (\cf3 BBCSAudioIn\cf0 .new([9,10]), \cf3 ChooseCutProc\cf0 .new(\{[0.5,1.0].choose\},\{rrand(1,3)\}));\
e= \cf3 BBCut\cf0 (\cf3 BBCSAudioIn\cf0 .new(11), \cf3 SQPusher1\cf0 .new);\
\
b.tempo_(3.3).go;\
c.tempo_(3.3).go;\
d.tempo_(3.3).go;\
e.tempo_(3.3).go;\
)\
\
\
\
\
\cf2 //stereo test-\cf0 \
\{\cf3 Out\cf0 .ar(16, \cf3 Pan2\cf0 .ar(\cf3 SinOsc\cf0 .ar(\cf3 SinOsc\cf0 .kr(3.2, 0, 200, 400), 0, 0.1), \cf3 SinOsc\cf0 .kr(0.4)))\}.play\
\
\cf2 //works\cf0 \
\cf3 BBCut\cf0 (\cf3 BBCSAudioIn\cf0 .new([10]), \cf3 SQPusher1\cf0 .new).tempo_(3.2).go;\
\
\cf3 BBCut\cf0 (\cf3 BBCSAudioIn\cf0 .new(10), \cf3 SQPusher1\cf0 .new).tempo_(3.2).go;\
 \
\cf3 BBCut\cf0 (\cf3 BBCSAudioIn\cf0 .new([9,10]), \cf3 SQPusher1\cf0 .new).tempo_(3.2).go;\
\
\cf3 BBCut\cf0 (\cf3 BBCSAudioIn\cf0 .new([9,10]), \cf3 BBCutProc11\cf0 .new).tempo_(3.2).go;\
\
\
\cf2 //audio in with fx courtesy of BBCutSynthParam superclass\cf0 \
(\
b= \cf3 BBCut\cf0 .new([\cf3 BBCG\cf0 (\cf3 BBCSAudioIn\cf0 (1, ampfunc:\cf3 BBCSRollAmplitude\cf0 .new,panfunc: \cf3 BBCSPan1\cf0 .new, pbsfunc: \cf3 BBCSPlayback1\cf0 .new), \cf3 Group\cf0 .new, 0)],\cf3 WarpCutProc1\cf0 .new);\
\
b.tempo_(2.3).go;
\f0\fs24 \
)}