{\rtf1\mac\ansicpg10000\cocoartf102
{\fonttbl\f0\fswiss\fcharset77 Helvetica;\f1\fswiss\fcharset77 Helvetica-Bold;\f2\fnil\fcharset77 Monaco;
}
{\colortbl;\red255\green255\blue255;\red0\green0\blue191;\red96\green96\blue96;\red191\green0\blue0;
\red0\green115\blue0;}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\fs18 \cf0 This file is part of The BBCut Library. Copyright (C) 2001  Nick M.Collins distributed under the terms of the GNU General Public License full notice in file BBCutLibrary.help
\f1\b\fs30 \
\
BBCSKnownOffsets
\f0\b0\fs24 \
\

\f1\b Superclass: BBCutSynthSF
\f0\b0 \
\
BBCSKnownOffsets is used where a soundfile or signal is broken up into slices and the cut routines playback the appropriate slice at a given time. This avoids the change of pitch with varying playback tempo found in BBCutSynthSF.  Given an instruction to play a cut of some length, this code will check which events fall into that time interval, the event positions being stretched or contracted by the current tempo. A side effect of this way of working is that the events can \
also be quantised to custom groove templates so their appearance matches some rhythmic recipe. \
\
You can find permissible offsets manually or using any third party method, pass in an obvious restricted \
set like exact slices through a sample, or use one of the Event Detection which may be added back into a future BBCut.\
\
The auxilliary class SF3 is required.\
\

\f1\b \ul Class Methods
\f0\b0 \ulnone \
\
*
\f1\b new( sf,randomoffset, ampfunc, panfunc, pbsfunc, dutycycle, atkprop, relprop, curve, offsetshiftfunc)
\f0\b0   \
\
As BBCutSynthSF.
\f1\b \

\f0\b0 \

\f1\b \ul Instance Methods
\f0\b0 \ulnone \
\

\f1\b synthesisecut
\f0\b0 \
\
Examples- \
 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2\fs18 \cf0 (		\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf2 var\cf0  sf;\
\
sf= \cf2 SF3\cf0 (
\f0 \cf3 "
\f2 \cf3 break
\f0 \cf3 "
\f2 \cf0 ,8);\
\
sf.setKnown;	\cf4 //set up known offsets, defaults to 16th note slices\cf0 \
\
\cf2 Post\cf0  << [sf.onsets,sf.durs, sf.beatpos];\
\
\cf2 BBCut\cf0 (\cf2 BBCSKnownOffsets\cf0 (sf)).tempo_(2).go;\
\
)\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\fs24 \cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2\fs18 \cf0 (		\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf2 var\cf0  sf;\
\
sf= \cf2 SF3\cf0 (
\f0 \cf3 "
\f2 \cf3 break2
\f0 \cf3 "
\f2 \cf0 ,4);\
\
sf.setKnown(32);	\cf4 //passing offset array by telling it a number of slices to cut in- 32 over 4 beats= 32nd notes\cf0 \
\
\cf2 BBCut\cf0 (\cf2 BBCSKnownOffsets\cf0 (sf)).tempo_(2).go;\
\
)
\f0\fs24 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2\fs18 \cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf4 //note no sample repitching when tempo doubled\cf0 \
(		\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf2 var\cf0  sf;\
\
sf= \cf2 SF3\cf0 (
\f0 \cf3 "
\f2 \cf3 break2
\f0 \cf3 "
\f2 \cf0 ,4);\
\
sf.setKnown(32);	\cf4 //passing offset array by telling it a number of slices to cut in- 32 over 4 beats= 32nd notes\cf0 \
\
\cf2 BBCut\cf0 (\cf2 BBCSKnownOffsets\cf0 (sf)).tempo_(4).go;\
\
)\
\
\
(\cf4 //same done more overtly still		\cf0 \
\cf2 var\cf0  sf,slicelength, numslices, slices;\
\
sf= \cf2 SF3\cf0 (
\f0 \cf3 "
\f2 \cf3 break
\f0 \cf3 "
\f2 \cf0 ,8);\
\
numslices=16;	\cf4 //ie, eighth note slices across this two bar signal\cf0 \
\
slicelength= (sf.numFrames)/numslices;\
\
slices= \cf2 Array\cf0 .fill(numslices,\{\cf2 arg\cf0  i; i*slicelength\}).round(1.0).asInteger;\
\
sf.setKnown(slices);	\
\
\cf2 BBCut\cf0 (\cf2 BBCSKnownOffsets\cf0 (sf)).tempo_(2).go;\
)
\f0\fs24 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2\fs18 \cf0 \
\
(		\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf2 var\cf0  sf;\
\
sf= \cf2 SF3\cf0 (
\f0 \cf3 "
\f2 \cf3 break
\f0 \cf3 "
\f2 \cf0 ,8);\
\
sf.setKnown;	\cf4 //set up known offsets, defaults to 16th note slices\cf0 \
sf.setGroove;\
sf.grooveon=\cf2 true\cf0 ;\
\
\cf2 BBCut\cf0 (\cf2 BBCSKnownOffsets\cf0 (sf)).tempo_(2).go;\
)\
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf4 //two at once\cf0 \
(		\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf2 var\cf0  sf;\
\
sf= \cf2 SF3\cf0 .array([
\f0 \cf3 "
\f2 \cf3 break"\cf0 ,\cf3 "break2"\cf0 ],[8,8]);\
\
sf.do(\{\cf2 arg\cf0  val; val.setKnown(32);	\
val.setGroove;\
val.grooveon=\cf2 true\cf0 ;\
\});\
\
\cf2 BBCut\cf0 (\cf2 BBCSKnownOffsets\cf0 (sf.at(0))).tempo_(2.4).go;\
\cf2 BBCut\cf0 (\cf2 BBCSKnownOffsets\cf0 (sf.at(1)), \cf2 WarpCutProc1\cf0 .new).tempo_(2.4).go;\
)\
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf4 //jumping index and groove on/off\cf0 \
(		\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf2 var\cf0  sf, tc;\
\
sf= \cf2 SF3\cf0 .array([
\f0 \cf3 "
\f2 \cf3 break"\cf0 ,\cf3 "break2"\cf0 ],[8,8]);\
\
sf.do(\{\cf2 arg\cf0  val; val.setKnown(32);	\
val.setGroove;\
val.grooveon=\cf2 true\cf0 ;\
\});\
\
tc=\cf2 TempoClock\cf0 (2.4);\
\
\cf2 BBCut\cf0 (\cf2 BBCSKnownOffsets\cf0 (\cf2 SF3SelectPerPhrase\cf0 (sf, \{2.rand\})),\
\cf2 BBCPPermute\cf0 .new(8.0, 16, \{\cf2 arg\cf0  index, n;  n-3*index*index-1\})\
,tc).go;\
\
tc.schedAbs(tc.elapsedBeats,\{\
sf.at(0).grooveon=0.5.coin;\
sf.at(0).grooveon=0.5.coin;\
4.0;\
\});\
\
)\
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf4 //user defined groove function\cf0 \
(		\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf2 var\cf0  sf;\
\
sf= \cf2 SF3\cf0 (
\f0 \cf3 "
\f2 \cf3 break
\f0 \cf3 "
\f2 \cf0 ,8);\
\
sf.setKnown(32);	\cf4 //set up known offsets, defaults to 16th note slices\cf0 \
sf.setGroove(0.25,\{\cf2 arg\cf0  beat; \cf2 var\cf0  tmp; tmp= beat%1.0; if(  ((tmp>=0.75) && (tmp<=0.999)), \{beat-tmp+0.9\}, \{beat\});\};);\
sf.grooveon=\cf2 true\cf0 ;\
\
\cf2 BBCut\cf0 (\cf2 BBCSKnownOffsets\cf0 (sf)).tempo_(2).go;\
)\
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf4 //user defined groove function and random set of offsets\cf0 \
(		\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf2 var\cf0  sf, offsets;\
\
sf= \cf2 SF3\cf0 (
\f0 \cf3 "
\f2 \cf3 break
\f0 \cf3 "
\f2 \cf0 ,8);\
\
offsets= \cf2 Array\cf0 .fill(64, \{rrand(0,sf.numFrames)\}).sort; \cf4 //BBCSAutoSplice won't sort for you\cf0 \
\
sf.setKnown(offsets);	\cf4 //set up known offsets, defaults to 16th note slices\cf0 \
sf.setGroove(0.25,\{\cf2 arg\cf0  beat; \cf2 var\cf0  tmp; tmp= beat%1.0; if(  ((tmp>=0.75) && (tmp<=0.999)), \{beat-tmp+[0.8,0.9].choose\}, \{beat\});\});\
sf.grooveon=\cf2 true\cf0 ;\
\
\cf2 BBCut\cf0 (\cf2 BBCSKnownOffsets\cf0 (sf)).tempo_(2).go;\
)\
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf4 //random offsets, durs, randomoffset high in BBCutSynthSF\cf0 \
(		\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf2 var\cf0  sf, offsets, durs;\
\
sf= \cf2 SF3\cf0 (
\f0 \cf3 "
\f2 \cf3 a11wlk01.wav
\f0 \cf3 "
\f2 \cf0 ,8);\
\
offsets= \cf2 Array\cf0 .fill(64, \{rrand(0,sf.numFrames)\}).sort; \cf4 //BBCSAutoSplice won't sort for you\cf0 \
durs= \cf2 Array\cf0 .fill(64, \{rrand(0.01, 0.5)\}); \cf4 //random durations in seconds\cf0 \
\
sf.setKnown(offsets, durs);	\cf4 //set up known offsets, defaults to 16th note slices\cf0 \
\
\cf2 BBCut\cf0 (\cf2 BBCSKnownOffsets\cf0 (sf, 0.8, ampfunc:0.1)).tempo_(2).go;\
)\
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf4 //random offsets, durs, randomoffset high in BBCutSynthSF\cf0 \
(		\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf2 var\cf0  sf, offsets;\
\cf2 var\cf0  mx,my, bb;\
\
mx=0.0;my=2.0;\
\
sf= \cf2 SF3\cf0 (
\f0 \cf3 "
\f2 \cf3 break
\f0 \cf3 "
\f2 \cf0 ,8);\
\
sf.setKnown(32);	\cf4 //set up known offsets, defaults to 16th note slices\cf0 \
\
bb=\cf2 BBCut\cf0 (\cf2 BBCSKnownOffsets\cf0 (sf, 0.8, ampfunc:0.2, panfunc:\{1.0.rand2\}, dutycycle:\{mx*2.0+0.1\}));\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf4 // define controls on ControlBusses 10 and 11\cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf2 SynthDef\cf0 (\cf3 "mice"\cf0 , \{\
	\cf2 ReplaceOut\cf0 .kr(10, \cf2 MouseX\cf0 .kr(0,1));		\cf4 //MouseX control \cf0 \
	\cf2 ReplaceOut\cf0 .kr(11, \cf2 MouseY\cf0 .kr(0,1));		\cf4 //MouseY control \cf0 \
\}).play;\
\
\cf2 OSCresponder\cf0 (s.addr, \cf5 '/c_set'\cf0 , \{\cf2 arg\cf0  time, resp, msg; \
if(msg.at(1)==10, \{mx=msg.at(2)\});\
if(msg.at(1)==11, \{my=msg.at(2); bb.tempo_(1.0+(2.0*my))\});\
\}).add;\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf4 //must have OSCResponder for c_set, get 10 tempo readings a second\cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf2 SystemClock\cf0 .sched(0.0, \{s.sendMsg(\cf3 "/c_get"\cf0 , 10); s.sendMsg(\cf3 "/c_get"\cf0 , 11); 0.1\});\
\
bb.go;\
\
)\
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf4 //if played at slow tempo there may be noticeable breaks inbetween slices of the original\cf0 \
(		\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf2 var\cf0  sf;\
\
sf= \cf2 SF3\cf0 (
\f0 \cf3 "
\f2 \cf3 break2
\f0 \cf3 "
\f2 \cf0 ,4);\
\
sf.setKnown(\
[ 0, 0.2561820471086, 0.43825503355705, 0.56711409395973, 0.63155948071284, 0.74832214765101, 0.86644295302013 ]*sf.numFrames\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf4 //[ 0, 0.2561820471086, 0.38590604026846, 0.43422818791946, 0.49082501791064, 0.56711409395973, 0.63155948071284, 0.74832214765101, 0.82348993288591, 0.86644295302013, 0.91342281879195 ]\cf0 \
);	\cf4 //explicit onsets\cf0 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf2 BBCut\cf0 (\cf2 BBCSKnownOffsets\cf0 (sf), \cf2 ChooseCutProc\cf0 (8.0,1)).tempo_(3).go;\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf4 //BBCut(BBCSKnownOffsets(sf, relprop:0.5, curve:-6),SQPusher1.new).tempo_(1.3).go;\cf0 \
)\
\
\
}