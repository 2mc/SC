{\rtf1\mac\ansicpg10000\cocoartf102
{\fonttbl\f0\fswiss\fcharset77 Helvetica;\f1\fswiss\fcharset77 Helvetica-Bold;\f2\fswiss\fcharset77 Helvetica-Oblique;
\f3\fnil\fcharset77 Monaco;}
{\colortbl;\red255\green255\blue255;\red191\green0\blue0;\red0\green0\blue191;\red96\green96\blue96;
}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\fs20 \cf0 This file is part of The BBCut Library. Copyright (C) 2001  Nick M.Collins distributed under the terms of the GNU General Public License full notice in file BBCutLibrary.help
\fs24 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\b \cf0 BBCut
\f0\b0 \
\
The BBCut Library is a set of classes implementing an abstraction of the cutting up of audio with respect to rhythmic schemes. Within it's assumptions, the source to be cut up could be a soundfile, current audio in or any unit generator graph.  The method of cutting is also freely selectable from any that conform to a particular interface. In theory any bbcutsynth should run with any bbcutprocedure. Further, the message handling of the classes should  allow the design of effects that respect the manner of cutting, for instance, changing filter parameters for each repetition in a 'roll' but not during normal playback. \
\
This library is an update from BBCut1.1.1 for SuperCollider 2. Some of the functionality has been removed temporarily, and will certainly be updated at a future point as limitations and improvements are identified. It is historically derived from the old BreakBeatx cutters. There is no assumption that we must cut breakbeats with it. By separating cut procedures from cut synthesis algorithmic composition parameters are separated from those for sound synthesis, which had caused a lot of muddle in BreakBeat5's parameter list for instance!\
\
The BBCut class provides the central class for running the library. It is hidden in some simpler implementations. With this class, cut procedures (algorithmic composition routines for cutting) are separated from the cut synthesisers, which complete the rendering of generated cut sequences. \
\

\f1\b \ul Class Methods
\f0\b0 \ulnone \
\

\f1\b *new( bbcgarray, bbcutproc, tempoclock)\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b0 \cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\b \cf0 bbcgarray
\f0\b0  - an Array of BBCutGroups, though this argument can also cope with being passed a BBCutSynth directly, a single BBCutGroup, an Array of BBCutSynths and an Array of Arrays of BBCutSynths. This is a real change from SC2 BBCut, which used to just deal with one BBCutSynth and one BBCutProc. Now, a proc can have multiple renderers. The BBCutGroup is a necessary abstraction introduced to cover the execution graph and bus requirements of SC3, and you can think of BBCut making Group Nodes on the Server for each distinct cut synthesiser chain.    \

\f1\b bbcutproc
\f0\b0  - an instance of a class derived from BBCutProc. \
\

\f1\b tempoclock-
\f0\b0  A TempoClock for the event scheduling. Just leave this as nil if you want the BBCut instance to have its own clock, else pass one in for sharing a clock with other instances, or running in sync with a master clock for the piece.\
\
See [BBCutLibrary.help] for lists of classes.\
\

\f1\b *server
\f0\b0  Get the current server on which BBCut defaults to spawning synths. Also use the currentserver classvar to set or get. \
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\b\fs22 \cf0 \ul Instance Methods\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b0\fs24 \cf0 \ulnone \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\b \cf0 go 
\f0\b0 Start the BBCut object playing\

\f1\b play
\f0\b0  synonymous with .go\
\

\f1\b tempo 
\f0\b0   Get current tempo\

\f1\b tempo_ 
\f0\b0 Set current tempo\
\

\f1\b kill
\f0\b0  Kill this bbcut instance totally (releases all associated synths)\

\f1\b pause(pau)
\f0\b0  pause temporarily, argument 1 for on, 0 for off\

\f1\b run(bool)
\f0\b0  pause, normal syntax of true for on, false for off\
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2\i \cf0 Examples- please use your own sample sources\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\i0 \cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f3\fs18 \cf0 (	\cf2 //shortest possible example, defaults to BBCutProc11 cut procedure\cf0 \
\cf3 BBCut\cf0 (\cf3 BBCSAudioIn\cf0 .new).go;\
)\
\
(	\cf2 //the same for a soundfile\cf0 \
\cf3 var\cf0  sf;\
\
sf= \cf3 SF3\cf0 .new(\cf4 "break"\cf0 ,8);\
\
\cf3 BBCut\cf0 (\cf3 BBCutSynthSF\cf0 (sf)).tempo_(2).go;\
)\
\
\
(	\cf2 //explicit creation of BBCutGroup, passing in a Group Node for the synthesis and specifying the outbus\cf0 \
\cf3 var\cf0  sf;\
\
sf= \cf3 SF3\cf0 .new(\cf4 "a11wlk01.wav"\cf0 ,4);\
\
\cf2 //outbus is zero\cf0 \
\cf3 BBCut\cf0 ([\cf3 BBCutGroup\cf0 ([\cf3 BBCutSynthSF\cf0 (sf, ampfunc:\{0.5\})], \cf3 Group\cf0 .new, 0)], WarpCutProc1.new).tempo_(2).go;\
)\
\
\
\cf2 //showing off the five input possibilities for the bbcutgroup array argument\cf0 \
\cf2 //five options for shortcuts- all work because of code in BBCut-initBBCut\cf0 \
\cf2 //note how everything in that first argument shares the same cut procedure\cf0 \
\cf2 //see BBCutGroup help file for further explanations\cf0 \
\
\cf2 //run this first to load the samples:\cf0 \
(\
\cf3 var\cf0  filenames, bpsound;\
\
\cf2 //Put in the locations of your samples\cf0 \
filenames= [\cf4 "break"\cf0 ,\cf4 "break2"\cf0 ];\
\cf2 //how many beats in your samples?\cf0 \
bpsound= [8,4];\
\
f= \cf3 Array\cf0 .fill(filenames.size, \{\cf3 arg\cf0  i; \cf3 SF3\cf0 (filenames.at(i), bpsound.at(i))\});\
\
f.do(\{\cf3 arg\cf0  val; \cf3 Post\cf0  <<[val.soundFilePath, val.numChannels, val.numFrames, val.sampleRate, val.buffer.bufnum]<<nl;\});\
)\
\
\cf2 //run any one assignment line then run with c.go line\cf0 \
\cf2 //simple, looks like old style BBCut1.1 way \cf0 \
c= \cf3 BBCut\cf0 (\cf3 BBCSTest\cf0 .new,\cf3 BBCutProc11\cf0 .new);\
\
\cf2 //makes one running BBCutGroup containing two renderers\cf0 \
c= \cf3 BBCut\cf0 ([\cf3 BBCSTest\cf0 .new,\cf3 BBCutSynthSF\cf0 (f.at(1))],\cf3 BBCutProc11\cf0 .new);\
\
\cf2 //makes three running groups, first with default cut synth, second and third with sample based renderers\cf0 \
c= \cf3 BBCut\cf0 ([[\cf3 BBCSTest\cf0 .new], [\cf3 BBCutSynthSF\cf0 (f.at(0))],[\cf3 BBCutSynthSF\cf0 (f.at(1))]],\cf3 BBCutProc11\cf0 .new);\
\
\cf2 //create explicitly a single BBCutGroup (BBCG is a shortcut name for one) containing a default \cf0 \
\cf2 //BBCutSynth\cf0 \
c= \cf3 BBCut\cf0 (\cf3 BBCG\cf0 (\cf3 BBCSTest\cf0 .new),\cf3 BBCutProc11\cf0 .new);\
\
\cf2 //explicitly create an array of BBCutGroups, like the third option above but here more explicitly done\cf0 \
c= \cf3 BBCut\cf0 ([\cf3 BBCG\cf0 (\cf3 BBCSTest\cf0 .new), \cf3 BBCG\cf0 ([\cf3 BBCutSynthSF\cf0 (f.at(0))]),BBCG([\cf3 BBCutSynthSF\cf0 (f.at(1))])],\cf3 BBCutProc11\cf0 .new);\
\
c.tempo_(2.3).go;\
\
\
\cf2 //tempo ratio of 10 to 11\cf0 \
(\
\cf3 var\cf0  sf, tc1, tc2, bbc1, bbc2, bbc3;\
\
sf=\cf3 SF3\cf0 .array([\cf4 "break"\cf0 , \cf4 "break2"\cf0 ],[8,4]);\
\
tc1=\cf3 TempoClock\cf0 .new(2);\
tc2= \cf3 TempoClock\cf0 .new(2.2);\
\
bbc1=\cf3 BBCut\cf0 (\cf3 BBCutSynthSF\cf0 (sf.at(0),panfunc:-0.75),\cf3 nil\cf0 ,tc1);\
bbc2=\cf3 BBCut\cf0 (\cf3 BBCutSynthSF\cf0 (sf.at(0),panfunc:0.75),\cf3 nil\cf0 ,tc1);\
\
\cf2 //to avoid the filter affecting everything, render to outbus 3 then write back to main out\cf0 \
bbc3=\cf3 BBCut\cf0 (\cf3 BBCG\cf0 ([\cf3 BBCSFilter1\cf0 .new,\cf3 BBCutSynthSF\cf0 (sf.at(1),ampfunc:2, panfunc:0.0, pbsfunc:\cf3 BBCSPlayback1\cf0 (0.89))], \cf3 Group\cf0 .new,3),\cf3 BBCutProc11(phrasebars:1, rollchance:0.5)\cf0 ,tc2);\
\
\{\cf3 Out\cf0 .ar(0, \cf3 In\cf0 .ar(3,2))\}.play;\
bbc1.go; bbc2.go; bbc3.go;\
)\
\
\
\cf2 //need demoes of swapping cutsynth or cutproc on the fly\cf0 \
\cf2 //easy to put any BBCutGroup in a new BBCut instance when you want\cf0 \
\cf2 //use pause\cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\fs24 \cf0 \
\
\
}