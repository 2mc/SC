{\rtf1\mac\ansicpg10000\cocoartf102
{\fonttbl\f0\fnil\fcharset77 Monaco;}
{\colortbl;\red255\green255\blue255;\red191\green0\blue0;\red0\green191\blue0;\red0\green0\blue191;
\red96\green96\blue96;\red0\green115\blue0;}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\fs18 \cf2 //This file is part of The BBCut Library. Copyright (C) 2001  Nick M.Collins distributed under the terms of the GNU General Public License full notice in file BBCutLibrary.help\

\fs52 \cf3 \
Simulating Squarepusher\
\cf0 Nick Collins 			\cf4 www.sicklincoln.org\cf0 \
\

\fs42 (from a talk given at Cybersonica 2003, at the ICA, London)
\fs52 \
\
This is SuperCollider 3, for which I've written an extension set: The BBCut Library.\
\
\
BBCut has many routines that explore the possibilities of automated audio cutting. It grew originally out of experiments into making algorithmic drum and bass, hence the name BreakBeat CUTting.\
\
\
\
\
\
\
\
\
\
\
\
Here's a simple audio demo as a warm up:\
\
source-\

\fs18 \cf4 SF3\cf0 (\cf5 "sounds/breaks/BRKCL5.WAV"\cf0 ).loop\

\fs52 \
cutups in the style of early d+b/jungle:\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\fs18 \cf0 (\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf4 var\cf0  sf;\
\
sf= \cf4 SF3\cf0 (\cf5 "sounds/breaks/BRKCL5.WAV",4\cf0 );\
\
\cf4 BBCut\cf0 (\cf4 BBCutSynthSF\cf0 (sf),\cf4 BBCutProc11\cf0 .new).tempo_(2.8).play\
)
\fs52 \
\
\
\
\
\
\
\
\
I diverged into stranger experiments into recursive cutting, permutation change ringing, fast buffer rolling, cut aware effects and audiovisual cutting and that's too much to go into now- see my various papers (ICMC2002/03, Leonardo Music Journal 13 etc) or the code available from my site. \
\
\
There are all sorts of justifications for this research, (like the fact that it empowers live interactive and generative performance) but some of the best results come from modelling existing styles and then extrapolating in new directions. \
 \
 \
Since I'd been getting away from the musical styles that first got me involved in this area, I thought it would be fun to go back and do some new cutting algorithms, explicitly for breakbeat source samples.\
\
\
\
\
\
\
\
\
\
\
\
I thought of a master drum programmer, Tom Jenkinson, aka Squarepusher, and decided to see if I could extract some hallmarks of his hyper manic style. It seems that in the main Jenkinson does the beat programming from scratch using a sequencer and drum machine (he only got a computer relatively recently), and neither attempts strict breakbeat cutting nor live generative work with the beats except for fx.\
\
\
For purists in the audience, don't worry- there's no claim here to represent all the things that Squarepusher does, theres no simple solution to encapsulation of a musician. But I can capture some interesting facets of his style as a starting point for an automated cutting routine.\
\
\
\
\
\
\
\
Let's look at some analysis of a blast of Squarepusher. This is from Live in Japan, disc 2 of 'Do you Know Squarepusher' (Warp) Track 7, 4min 49.645sec for eight 4/4 bars at 200bpm.        \
\
\

\fs40 (slides were presented with transcriptions of the\
rhythmic aggregate at this point, not included here,\
they're part of a paper under review)\

\fs52 \
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
By looking at many more tracks I compiled a small library of Squarepusher fills and riffs, and analysed the steady and more convoluted phrases and gestures employed.  \
\
\
With this as inspiration to guide me I modelled the same 'type' of rhythmic patterns in the language of breakbeat cutting particular to BBCut. There are various parameters for live control to the procedure, but I'll skimp over the technicalities today. \
\
\

\fs32 (see the SQPusher1 help file for the examples I presented at this point)\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\fs18 \cf0 \
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\fs52 \cf0 \
And then for fun I set up cut aware effects and further global effects to model the live Squarepusher experience, simulating the rackmount fx units and software plugins Tom uses for his shows (granulators, comb filters,phasers, bit crushers etc). \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\fs18 \cf0 \
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\fs34 \cf0 (Use your favourite break, I'm using a splice from Dillinja's Muthafucka)\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\fs18 \cf0 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf2 //If the PitchShift UGen returns, add it back in! \cf0 \
(	\cf2 //squarepusher fx 2 - with pitched repeats, combN, need extra granulator on top\cf0 \
\cf4 var\cf0  sf, bus, fxsynth;\
\cf4 var\cf0  mx,my, tc;\
\
sf=\cf4 SF3\cf0 (\cf5 ":Sounds:bogdan:dillbeat1"\cf0 ,8);   \cf2 //also good fun with SF3("a11wlk01.wav",8);\cf0 \
\
mx=0.0; my=0.0;\
\
\cf2 // define controls on ControlBusses 10 and 11\cf0 \
\cf4 SynthDef\cf0 (\cf5 "mice"\cf0 , \{\
	\cf4 ReplaceOut\cf0 .kr(10, \cf4 MouseX\cf0 .kr(0,1));		\cf2 //MouseX control \cf0 \
	\cf4 ReplaceOut\cf0 .kr(11, \cf4 MouseY\cf0 .kr(0,1));		\cf2 //MouseY control \cf0 \
\}).play;\
\
\cf4 OSCresponder\cf0 (s.addr, \cf6 '/c_set'\cf0 , \{\cf4 arg\cf0  time, resp, msg; \
if(msg.at(1)==10, \{mx=msg.at(2)\});\
if(msg.at(1)==11, \{my=msg.at(2)\});\
\}).add;\
\
\cf2 //must have OSCResponder for c_set, get 10 tempo readings a second\cf0 \
\cf4 SystemClock\cf0 .sched(0.0, \{s.sendMsg(\cf5 "/c_get"\cf0 , 10); s.sendMsg(\cf5 "/c_get"\cf0 , 11); 0.1\});\
\
tc=\cf4 TempoClock\cf0 (3.333);\
\
\cf2 //create stereo bus for source cutter\cf0 \
bus= \cf4 Bus\cf0 .audio(\cf4 BBCut\cf0 .server, 2);\
\
\cf2 //make it appear on that bus\cf0 \
\cf4 BBCut\cf0 (\
\cf4 BBCG\cf0 (\
\cf4 BBCutSynthSF\cf0 (sf,\{my\},\cf4 SQPushFXAmp\cf0 .new,0.0, \cf4 SQPushFXPitch\cf0 .new(pbchance:0.8))\
,\cf4 nil\cf0 ,bus.index\
),\
\cf4 SQPusher1\cf0 .new(\{my\},4, 1.0), tc\
).go;\
\
\cf2 //recursive audio cutter for fun and fast pitched rolls 1 time in 10\cf0 \
\cf4 BBCut\cf0 (\
\cf4 BBCSAudioIn\cf0 (bus.index-7),\
\cf4 ChooseBlockProc\cf0 (\{2.0\},\{[1, 96].wchoose([0.9,0.1])\}, 4.0), tc\
).go;\
\
\
\cf2 //Big FX Synth\cf0 \
fxsynth=\cf4 SynthDef\cf0 (\cf5 "bigsqpushfx"\cf0 ,\{\cf4 arg\cf0  mix=0.0,mix2=0.0,samprate=44100;\
\cf4 var\cf0  out, fx, bbcut, sampcrush;\
\cf4 var\cf0  a,c,z,y;\
\
bbcut=\cf4 In\cf0 .ar(0,2);\
\
sampcrush= \cf4 Latch\cf0 .ar(bbcut, \cf4 Impulse\cf0 .ar(samprate));\
\
bbcut=((1.0-mix2)*bbcut)+(mix2*sampcrush);\
\
fx= \
\cf2 //PitchShift.ar(		//PitchShift not installed yet! \cf0 \
\cf4 CombN\cf0 .ar(\
bbcut\
,0.3, \cf4 MouseX\cf0 .kr(0.01,0.29), \cf4 MouseX\cf0 .kr(1,3)\
);\
\cf2 //,0.2,MouseY.kr(0.1, 10, 'exponential'));\cf0 \
\
out= ((1.0-mix)*bbcut)+(mix*fx);\
\
\cf2 //reverb unit:\cf0 \
\
c = 2; \cf2 // number of comb delays\cf0 \
a = 4; \cf2 // number of allpass delays\cf0 \
\
\cf2 // reverb predelay time :\cf0 \
z = \cf4 DelayN\cf0 .ar(out, 0.048,0.048);\
\
\cf2 //for delaytime if want modulation-	//LFNoise1.kr(0.1.rand, 0.04, 0.05)\cf0 \
y=\cf4 Mix\cf0 .arFill(c,\{\cf4 CombL\cf0 .ar(z,0.1,rrand(0.01, 0.1),5)\});\
	\
\cf2 // chain of 4 allpass delays on each of two channels (8 total) :\cf0 \
a.do(\{ y = \cf4 AllpassN\cf0 .ar(y, 0.051, [rrand(0.01, 0.05),rrand(0.01, 0.05)], 1) \});\
	\
\cf2 // add original sound to reverb and play it :\cf0 \
out= \cf4 Limiter\cf0 .ar(out+(0.1*y));\
\
\cf4 ReplaceOut\cf0 .ar(0,out);\
 \}).play;\
\
\cf2 //routine for updating fx parameters\cf0 \
tc.schedAbs(tc.elapsedBeats,\{\
\cf4 var\cf0  num,siz, ec;\
\
ec=1.neg; \
\
fxsynth.set(\cf6 \\samprate\cf0 ,44100);\
fxsynth.set(\cf6 \\mix2\cf0 ,0.0);\
fxsynth.set(\cf6 \\mix\cf0 ,[0.0,0.2,1.0].choose);\
\
if(0.3.coin,\
\{\
num=[4,8,16].choose;\
siz=[0.5,0.25].wchoose([0.3,0.7]);\
\
tc.sched(8.0-(num*siz),\
\{ \
ec=ec+1;\
\
fxsynth.set(\cf6 \\mix2\cf0 ,1.0);\
fxsynth.set(\cf6 \\samprate\cf0 ,44100*(0.5**(ec+1)));\
\
if(ec<(num-1),siz,\cf4 nil\cf0 );\
\});\
\
\});\
 \
\
8.0\
\});\
\
\
)}