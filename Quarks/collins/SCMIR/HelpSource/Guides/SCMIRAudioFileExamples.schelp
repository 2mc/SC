title:: SCMIRAudioFile Examples
summary:: Represents an audio file for the SCMIR analysis system
categories:: Machine Listening
related:: Guides/SCMIRguide, Classes/SCMIR, Classes/SCMIRAudioFile, Classes/SCMIRSimilarityMatrix

DESCRIPTION::

This file summarizes some examples from the original SCMIRAudioFile.html file by Nick Collins. For general help on using SCMIRAudioFile see link::Classes/SCMIRAudioFile::. 

section:: Basics
code::
e = SCMIRAudioFile("sounds/a11wlk01.wav", [[MFCC, 13], [Chromagram, 12]]);
{e.extractFeatures()}.fork //wrapped in fork gives posted feedback as it goes
::

section:: Pretty Self-Similarity Image
code::
e = SCMIRAudioFile("sounds/a11wlk01.wav", [Loudness]);
{ e.extractFeatures; }.fork;  	// wait for me to finish
e.plotFeatureTrail;			// plot first feature by default; only one, so plots that
e.plotSelfSimilarity(1,3,1); 	// pretty image
::

section:: Novelty curve
Find novelty curve.
code::
e = SCMIRAudioFile("sounds/a11wlk01.wav", [[MFCC, 13], [Chromagram, 12]]);
{ e.extractFeatures; }.fork;  	// wait for me to finish
d = e.similarityMatrix(1, 2); 	
n = e.novelty(d, 30); 
n.normalize.plot; //plot it
::

subsection:: Find novelty curve and peak pick to extract sections

Note: this will not find any sections if the audio sample is as short as a11wlk01.

code::
l = f.findSections; //wait for me to finish

l //l is a list of section boundaries 
::

section:: Test more features

Note: For this, you must load the SC3plugins Quark which contains the MCLDUGens. These include the following UGens: FFTCrest, FFTSpread, FFTSlope.  

code::

e = SCMIRAudioFile("sounds/a11wlk01.wav", [[Loudness],[SpecCentroid],[SpecPcile, 0.95],[SpecPcile, 0.8],[SpecFlatness],[FFTCrest],[FFTCrest, 0, 2000], [FFTCrest, 2000, 10000],[FFTSpread],[FFTSlope],[SensoryDissonance]]);

e.extractFeatures; //wait for me to finish

e.plotFeatureTrail(0,0.0,2.0) //Loudness over two seconds
e.plotFeatureTrail(4,1.0,3.0) //SpecFlatness over two seconds starting at time 1.0

::

section:: ONSETS!

subsection:: Test of onset detection

code::
f = SCMIRAudioFile("/data/audio/mirdata/pixiesivebeentired.wav", [[MFCC, 13], [Chromagram, 12]]);
//f = SCMIRAudioFile("sounds/a11wlk01.wav", [[MFCC, 13], [Chromagram, 12]]);

(
f.extractFeatures; 
f.extractOnsets;
)

f.onsetdata
f.numonsets

f.gatherFeaturesByOnsets //after this operation, featuredata will be onset locked; if referencing specific frames, must use onsetdata to get (starting) times

f.featuresbysegments //this flag has now been set to true

//should now be same:
f.featuredata.size/f.numfeatures
f.numonsets

b = f.similarityMatrix(5, 2);
b.plot(1,10);

l = f.findSections(0,1,20);

l

//found by onset detection, compare to above
//[ 11.3429479599, 20.416145324707, 29.779592514038, 35.247890472412, 41.052879333496, 47.008796691895, 58.955463409424, 67.877731323242, 78.233833312988, 82.494697570801, 89.559364318848, 99.642631530762, 106.09777832031, 111.35709381104, 121.05142974854, 130.75736999512, 140.81161499023, 156.64181518555, 167.87446594238 ]

::

subsection:: Raw onset detection function as feature

code::
f = SCMIRAudioFile("/data/audio/mirdata/pixiesivebeentired.wav", [[Onsets,\rcomplex]]);
f.extractFeatures(); 
f.numframes;
f.featuredata.plot;
f.duration;

//artificial segmentation: one per second
a = (0.0, 1.0 .. (f.duration));

//averaging for each second
f.gatherFeaturesBySegments(a); 
f.numframes;
f.featuredata.plot;

//must recalculate features, didn't keep them in previous call when replaced with segment averages
f.extractFeatures(); //wait for me to finish

//max over each second rather than mean
f.gatherFeaturesBySegments(a, true, 1);
f.numframes;
f.featuredata.plot;
::

section:: More stuff (to be processed later)

code::
//predominant f0, hasFreq, and 4 chroma (activity in minor third regions of the octave)
f = SCMIRAudioFile("/data/audio/mirdata/pixiesivebeentired.wav", [[Tartini],[Chromagram, 4]]);

f.extractFeatures(); //wait for me to finish

f.plotFeatures(800,600,100,true); 

a = f.similarityMatrix(100); //100 features per similarity unit

//file is about 180 seconds long; eventual plot will be around 180*4 pixels to a side 
a.plot(4); 



//export ARFF file (for use with Weka Java-based machine learning software)
//defaults to features.arff filename in the SC application directory
e.exportARFF



e.plotSelfSimilarity(1,3); //one pixel is one similarity unit, can be stretched using second argument for smaller matrices



//test beat extraction: 

f = SCMIRAudioFile("/data/audio/mirdata/pixiesivebeentired.wav", [[MFCC, 13], [Chromagram, 12]]);

f.extractBeats(); //wait for me to finish

a = f.beatdata; //beat locations

b = f.tempi; //tempo curve
b.plot2
f.tempo; //estimate of global tempo as median

//Experimental: via auxiliary program: BeatRoot from Simon Dixon http://www.eecs.qmul.ac.uk/~simond/beatroot/
//provide location of the jar file
f.extractBeatsViaBeatRoot("/Users/nickcollins/Desktop/tosort/beatroot/beatroot-0.5.7.jar"); //wait for me to finish

a = f.beatdata



//test beatwise feature accumulation

f = SCMIRAudioFile("/data/audio/mirdata/pixiesivebeentired.wav", [[MFCC, 13], [Chromagram, 12]]);

(
	f.extractFeatures(); 
	f.extractBeats();
)


f.numfeatures
f.numframes

b = f.similarityMatrix(50, 2);
b.plot(4,10);

//by default, replaces old featuredata with beatwise features
f.gatherFeaturesByBeats //after this operation, featuredata will be beat locked; if referencing specific frames, must use beatdata to get (starting) times

f.featuresbysegments //this flag has now been set to true

//should now be same:
f.featuredata.size/f.numfeatures
f.numbeats

b = f.similarityMatrix(4, 2);
b.plot(5,10);

l = f.findSections(0,1,20);

l

//comparison of beat locked features and standard feature vectors for section finding; on this track, get better estimates from beat-locked segments (if out by a second or two)
//found by beat based feature vectors: [ 13.556099891663, 44.077278137207, 57.808979034424, 67.929977416992, 78.484901428223, 98.114463806152, 113.2437210083, 121.31120300293, 129.8851776123, 140.64761352539, 154.83645629883 ]
//found by blocks of standard feature frames
//[ 19.272562358277, 58.049886621315, 97.52380952381, 129.10294784581, 135.37233560091, 141.87392290249 ]



//test of batch processing


//or via pathMatch, e.g. "sounds/*.aiff".pathMatch

SCMIR.setTempDir("/Users/nickcollins/Desktop/SCMIRTest") //all saved files will go here

~files = ["sounds/a11wlk01.wav", "/data/audio/mirdata/pixiesivebeentired.wav"]; 

//batch process; within Routine to get progress feedback as it calculates (would be slightly faster without, but calculation beachball locking sclang may seem alarming)
(	
{
~files.do{|filename,i|	 

[i, filename].postln;
	
e = SCMIRAudioFile(filename, [[Loudness]]);
	
e.extractFeatures();

e.save("/Users/nickcollins/Desktop/SCMIRTest/"++(filename.splitext[0].basename++".scmirZ"));
		
}
}.fork;
)


a= ~files.collect{|filename| SCMIRAudioFile.newFromZ("/Users/nickcollins/Desktop/SCMIRTest/"++(filename.splitext[0].basename)++".scmirZ")}

a[0].numframes
a[1].numframes





//test of global normalization processing


//first run 
(
~files = ["sounds/a11wlk01.wav", "/data/audio/mirdata/pixiesivebeentired.wav","/data/audio/mirdata/Yellow Submarine.wav"]; 
~featureinfo= [[MFCC,13],[Chromagram,12]]; 

{SCMIR.findGlobalFeatureNorms(~files,~featureinfo); }.fork
	
)


SCMIR.globalfeaturenorms //in this case, will be minimums in first array, maximums in second


//you can save this file for later reuse (assumes exactly same featureinfo settings, which is up to you to check)

SCMIR.saveGlobalFeatureNorms("/Users/nickcollins/Desktop/testglobfeat.scmirZ"); 

//recall
SCMIR.loadGlobalFeatureNorms("/Users/nickcollins/Desktop/testglobfeat.scmirZ"); 



//now to normalize individual files with respect to global normalization
(
~normed = ~files.collect{|filename|
	var e; 
	
	e= SCMIRAudioFile(filename,~featureinfo);	
	
	e.extractFeatures(true, true); //will use global normalization 
	
}
)

//normalized SCMIRAudioFiles
//find max and mins in different files, so did normalize with respect to larger corpus
~normed[0].getFeatureTrail(0).minItem
~normed[1].getFeatureTrail(0).minItem



//compare standardization


e = SCMIRAudioFile("sounds/a11wlk01.wav", [[MFCC, 13], [Chromagram, 12]], 1); //additional third argument non zero means standardize, not normalize

e.extractFeatures();

e.featuredata

(
for(0,24,{|j|  
	var a; 
	
	a = e.getFeatureTrail(j); 
	[a.minItem,a.maxItem].postln;

	}); 
)


//graphing issues; by default, assumes 3 standard deviations either side of zero mean work out to 0.0 to 1.0 range

e.plotFeatures(300,300,40); 
e.plotFeatures(300,300,40,true); 


b = e.similarityMatrix(2, 2);
b.plot(5,6);


b.matrix.minItem




//time domain features and comparison to perceptual loudness and pitch

e = SCMIRAudioFile("sounds/a11wlk01.wav", [\ZCR,\RMS,\Loudness,\Tartini]);

e.extractFeatures()

e.numfeatures

e.featuredata

e.plotFeatures(300,300); //will resample feature data to fit dimensions requested

e.plotFeatures(400,600,40, true); //line based plot



::