#+TITLE: SCMIR: Collected Doc Files

Contents of all SCMIR documentation file collected here in org format for better overview in Emacs. 

Version 0.7 mostly. 

* SCMIR

** Intro

This extension library (with additional plugins and language invoked executables) for SuperCollider demonstrates carrying out some basic music information retrival tasks in audio content analysis. Right now, you can extract features for an audio file in NRT mode, plot features, get similarity matrices, plot them, extract novelty curves from the similarity matrices and thus find section boundaries. The library should work in batch processing too. 

The SCMIR base class allows you to set a base directory for temp files and storage of SCMIRAudioFile files with analysis data (.scmirZ format). Note that file permissions can be an issue on network systems; it is suggested that you work with a local copy of SuperCollider where you have write permissions. Also, do not try to analyze audio files from directories where you have no write access if you haven't set an alternative temp directory where temporary files can be written. 

_See also: SCMIRAudioFile, SCMIRSimilarityMatrix_

** Examples

SCMIR.setTempDir("/Users/nickcollins/Desktop/SCMIRTest");

SCMIR.tempdir

//don't use a tempdir, analysis files and saved .scmirZ archives appear in the same directory as any target sound file
SCMIR.setTempDir(nil);

SCMIR.tempdir

SCMIR.setFrameHop(512);  //default is 1024. Only these two numbers allowed for now. Note that changing this affects all open and to be loaded SCMIRAudioFiles; it may invalidate settings. It should only be used on a per complete project basis

SCMIR.setFrameHop(1024); //restore default

* SCMIRAudioFile
** General
Represents an audio file for the SCMIR analysis system	

Use this class to load a sound file and run feature extraction, normalization, and subsequent similarity tasks. Audio processing uses non-realtime (NRT) mode for scsynth. The feature extraction method must be called within a Routine from outside; this supports running this across lots of files in batch processing without spawning multiple simultaneous scsynth instances, or trying to use the results of processing before they are actually calculated!  

The format for requesting feature extraction is 
[[featureclass, featurespecificparams]]
So
[[MFCC, 13], [Chromagram, 12]]
means extract 13 MFCC coefficients and 12 chroma (12TET), 
Normalization is automatically applied, by default on a per individual feature basis (except for chroma, which are normalized as a group of features), and normalized with respect to the current file. There are mechanisms to have global normalisation over a corpus, see batch examples below. 

Features supported: MFCC, Chromagram, Loudness, Tartini, SensoryDissonance, SpecCentroid, SpecPcile, SpecFlatness, FFTCrest, FFTSpread, FFTSlope, Onsets in raw detection function mode

Assumptions/notes:
-Though the original sound file could be any rate, the MIR system sampling rate of 44100 is assumed. 
-Normalization is by default on a file by file basis, but see below for a global normalization example. You can turn off normalisation by passing false to extractFeatures
-For a large file, similarity matrix calculations are unavoidably slow when calculating within SC language itself. This is why auxilliary externals are used invoked from the language (now the default with similarityMatrix) 
-Version 0.3 introduces beat-locked features. You can even impose a beat trail (which could be any section times you like) via setBeatData then gatherFeaturesByBeats, or otherwise use the automatic extraction procedures (see below)
-Version 0.4 introduces onset detection, and arbitrary guide segmentations for feature accumulation, via gatherFeaturesBySegments (the onsets specific variant is gatherFeaturesByOnsets). 
-Note that for the cosine metric, the default for similarity matrices, the value is always 0.0 for a single feature feature vector, so we're assuming feature vectors have multiple entries in general. Manhattan and Euclidean metrics will be fine, however.  
See also: SCMIR, SCMIRSimiliarityMatrix


** Examples

e = SCMIRAudioFile("sounds/a11wlk01.wav", [[MFCC, 13], [Chromagram, 12]]);
{ e.extractFeatures }.fork //wrapped in fork gives posted feedback as it goes
// save .scmirZ files using ZArchive; binary storage of feature data and other instance variables
e.save("/Users/nickcollins/Desktop/a11wlk01.scmirZ")	

e.load("/Users/nickcollins/Desktop/a11wlk01.scmirZ")
//if no filenames are provided, will be placed in temp directory

e.plotFeatures(300, 300, 40); // will resample feature data to fit dimensions requested
e.plotFeatures(400, 600, 40, true); // line based plot
m = e.similarityMatrix;  // m is an SCMIRSimilarityMatrix object
m.plot(4);

// shortcut
e.plotSelfSimilarity(1,4); // unit = 1, stretch = 4, params as above 

//if already saved .scmirZ file, create directly from it. 
e = SCMIRAudioFile.newFromZ("/Users/nickcollins/Desktop/a11wlk01.scmirZ") 
// Z archive will have stored original location of audio file; 
// if moved in meantime, may need to update instance variable data, or just start anew

** a bigger file (substitute your own)
f = SCMIRAudioFile("/data/audio/mirdata/pixiesivebeentired.wav", [[MFCC, 13], [Chromagram, 12]]);
f.extractFeatures(); //wait for me to finish
f.plotFeatures(800,600,100); 
f.plotFeatures(1000,800,100,true); 

** Similarity Matrix
// can specify different metrics
//Euclidean
b = f.similarityMatrix(100, 2);
b.plot(5,6);

//Manhattan
c = f.similarityMatrix(100, 1);
c.plot(5,6);

//Cosine
d = f.similarityMatrix(100, 0);
d.plot(5,20); //boosted contrast

** Novelty curve
(
	d = f.similarityMatrix(10, 2); 	
	n = f.novelty(d,30); 
	n.normalize.plot; //plot it
)

** Find novelty curve and peak pick to extract sections
l = f.findSections(); //wait for me to finish

l //l is a list of section boundaries 

** Example of file with known predominant features

Predominant f0, hasFreq, and 4 chroma (activity in minor third regions of the octave)

f = SCMIRAudioFile("/data/audio/mirdata/pixiesivebeentired.wav", [[Tartini],[Chromagram, 4]]);
f.extractFeatures(); // wait for me to finish
f.plotFeatures(800,600,100,true); 
a = f.similarityMatrix(100); // 100 features per similarity unit

//file is about 180 seconds long; eventual plot will be around 180*4 pixels to a side 
a.plot(4);

** Pretty image with Loudness feature
e = SCMIRAudioFile("sounds/a11wlk01.wav", [Loudness]);
e.extractFeatures(); //wait for me to finish
e.plotFeatureTrail	//plot first feature by default; only one, so plots that

//one pixel is one similarity unit, can be stretched using second argument for smaller matrices
e.plotSelfSimilarity(1,3,1); 

** Data provided:
e.duration
e.numframes
e.featuredata
e.numfeatures
e.numChannels
e.featureinfo
e.basename
e.analysispath
e.sourcepath

** Test more features:

e = SCMIRAudioFile("sounds/a11wlk01.wav", [[Loudness],[SpecCentroid],[SpecPcile, 0.95],[SpecPcile, 0.8],[SpecFlatness],[FFTCrest],[FFTCrest, 0, 2000], [FFTCrest, 2000, 10000],[FFTSpread],[FFTSlope],[SensoryDissonance]]);

e.extractFeatures(); //wait for me to finish

e.plotFeatureTrail(0,0.0,2.0) //Loudness over two seconds
e.plotFeatureTrail(4,1.0,3.0) //SpecFlatness over two seconds starting at time 1.0

//export ARFF file (for use with Weka Java-based machine learning software)
//defaults to features.arff filename in the SC application directory
e.exportARFF

e.plotSelfSimilarity(1,3); //one pixel is one similarity unit, can be stretched using second argument for smaller matrices

** test beat extraction: 

f = SCMIRAudioFile("/data/audio/mirdata/pixiesivebeentired.wav", [[MFCC, 13], [Chromagram, 12]]);

f.extractBeats(); //wait for me to finish

a = f.beatdata; //beat locations

b = f.tempi; //tempo curve
b.plot2
f.tempo; //estimate of global tempo as median

** Experimental: via auxiliary program: BeatRoot from Simon Dixon http://www.eecs.qmul.ac.uk/~simond/beatroot/
//provide location of the jar file
f.extractBeatsViaBeatRoot("/Users/nickcollins/Desktop/tosort/beatroot/beatroot-0.5.7.jar"); //wait for me to finish

a = f.beatdata

** test beatwise feature accumulation

f = SCMIRAudioFile("/data/audio/mirdata/pixiesivebeentired.wav", [[MFCC, 13], [Chromagram, 12]]);

(
	f.extractFeatures(); 
	f.extractBeats();
)

f.numfeatures
f.numframes

b = f.similarityMatrix(50, 2);
b.plot(4,10);

//by default, replaces old featuredata with beatwise features
f.gatherFeaturesByBeats //after this operation, featuredata will be beat locked; 

// if referencing specific frames, must use beatdata to get (starting) times
f.featuresbysegments //this flag has now been set to true

//should now be same:
f.featuredata.size/f.numfeatures
f.numbeats

b = f.similarityMatrix(4, 2);
b.plot(5,10);

l = f.findSections(0,1,20);

//comparison of beat locked features and standard feature vectors for section finding; on this track, get better estimates from beat-locked segments (if out by a second or two)
//found by beat based feature vectors: [ 13.556099891663, 44.077278137207, 57.808979034424, 67.929977416992, 78.484901428223, 98.114463806152, 113.2437210083, 121.31120300293, 129.8851776123, 140.64761352539, 154.83645629883 ]
//found by blocks of standard feature frames
//[ 19.272562358277, 58.049886621315, 97.52380952381, 129.10294784581, 135.37233560091, 141.87392290249 ]




** test of onset detection

f = SCMIRAudioFile("/data/audio/mirdata/pixiesivebeentired.wav", [[MFCC, 13], [Chromagram, 12]]);
//f = SCMIRAudioFile("sounds/a11wlk01.wav", [[MFCC, 13], [Chromagram, 12]]);

(
f.extractFeatures(); 
f.extractOnsets();
)

f.onsetdata
f.numonsets

f.gatherFeaturesByOnsets //after this operation, featuredata will be onset locked; if referencing specific frames, must use onsetdata to get (starting) times

f.featuresbysegments //this flag has now been set to true

//should now be same:
f.featuredata.size/f.numfeatures
f.numonsets

b = f.similarityMatrix(5, 2);
b.plot(1,10);

l = f.findSections(0,1,20);

//found by onset detection, compare to above
//[ 11.3429479599, 20.416145324707, 29.779592514038, 35.247890472412, 41.052879333496, 47.008796691895, 58.955463409424, 67.877731323242, 78.233833312988, 82.494697570801, 89.559364318848, 99.642631530762, 106.09777832031, 111.35709381104, 121.05142974854, 130.75736999512, 140.81161499023, 156.64181518555, 167.87446594238 ]

//raw onset detection function as feature
f = SCMIRAudioFile("/data/audio/mirdata/pixiesivebeentired.wav", [[Onsets,\rcomplex]]);

f.extractFeatures(); 

f.numframes

f.featuredata.plot

f.duration

* artificial segmentation: one onset per second
a= (0.0,1.0..(f.duration))

//averaging for each second
f.gatherFeaturesBySegments(a); 

f.numframes

f.featuredata.plot

//must recalculate features, didn't keep them in previous call when replaced with segment averages
f.extractFeatures(); //wait for me to finish

//max over each second rather than mean
f.gatherFeaturesBySegments(a, true, 1); 

f.numframes

f.featuredata.plot




//test of batch processing


//or via pathMatch, e.g. "sounds/*.aiff".pathMatch

SCMIR.setTempDir("/Users/nickcollins/Desktop/SCMIRTest") //all saved files will go here

~files = ["sounds/a11wlk01.wav", "/data/audio/mirdata/pixiesivebeentired.wav"]; 

//batch process; within Routine to get progress feedback as it calculates (would be slightly faster without, but calculation beachball locking sclang may seem alarming)
(	
{
  ~files do: { | filename, i | 
      [i, filename].postln;
    e = SCMIRAudioFile(filename, [[Loudness]]);
    e.extractFeatures();
    e.save("/Users/nickcollins/Desktop/SCMIRTest/"++(filename.splitext[0].basename++".scmirZ"));
    }
}.fork;
)
a = ~files collect: { | filename |
		      SCMIRAudioFile.newFromZ("/Users/nickcollins/Desktop/SCMIRTest/"++(filename.splitext[0].basename)++".scmirZ")}

a[0].numframes
a[1].numframes

** test of global normalization processing
*** first run
(
~files = ["sounds/a11wlk01.wav", "/data/audio/mirdata/pixiesivebeentired.wav","/data/audio/mirdata/Yellow Submarine.wav"]; 
~featureinfo= [[MFCC,13],[Chromagram,12]]; 

{SCMIR.findGlobalFeatureNorms(~files,~featureinfo); }.fork
	
)


SCMIR.globalfeaturenorms //in this case, will be minimums in first array, maximums in second


//you can save this file for later reuse (assumes exactly same featureinfo settings, which is up to you to check)

SCMIR.saveGlobalFeatureNorms("/Users/nickcollins/Desktop/testglobfeat.scmirZ"); 

//recall
SCMIR.loadGlobalFeatureNorms("/Users/nickcollins/Desktop/testglobfeat.scmirZ"); 



//now to normalize individual files with respect to global normalization
(
~normed = ~files.collect{|filename|
	var e; 
	
	e= SCMIRAudioFile(filename,~featureinfo);	
	
	e.extractFeatures(true, true); //will use global normalization 
	
}
)

** normalized SCMIRAudioFiles
//find max and mins in different files, so did normalize with respect to larger corpus
~normed[0].getFeatureTrail(0).minItem
~normed[1].getFeatureTrail(0).minItem



** compare standardization


e = SCMIRAudioFile("sounds/a11wlk01.wav", [[MFCC, 13], [Chromagram, 12]], 1); //additional third argument non zero means standardize, not normalize

e.extractFeatures();

e.featuredata

(
for(0,24,{|j|  
	var a; 
	
	a = e.getFeatureTrail(j); 
	[a.minItem,a.maxItem].postln;

	}); 
)

** graphing issues
// by default, assumes 3 standard deviations either side of zero mean work out to 0.0 to 1.0 range

e.plotFeatures(300,300,40); 
e.plotFeatures(300,300,40,true);
b = e.similarityMatrix(2, 2);
b.plot(5,6);
b.matrix.minItem;

** time domain features and comparison to perceptual loudness and pitch

e = SCMIRAudioFile("sounds/a11wlk01.wav", [\ZCR,\RMS,\Loudness,\Tartini]);
e.extractFeatures;
e.numfeatures;
e.featuredata;
e.plotFeatures(300,300); //will resample feature data to fit dimensions requested
e.plotFeatures(400,600,40, true); //line based plot

* SCMIRSimilarityMatrix

Similarity matrix calculation and resources including plotting and DTW

An instance of the SCMIRSimilarityMatrix class calculates and stores a distance matrix over a single input sequence (self-similarity) or between two sequences. The sequences can be multi-dimensional feature vector sequences, though they must be in a flattened array format:
[feature0 at time0, feature 1 at time 0, ... feature dimensions-1 at time 0, feature 0 at time 1, ...]
 
Note that the cosine metric only gives non zero similarity values if the number of feature dimensions is greater than 1. Note also that the similarity value is 0.0 if two points are maximally close (hence, it is a distance matrix). 
 
The internal code operates on FloatArrays (due to interaction with external processing and need for RawArrays in file output and input), and auto conversion is imposed at input if required. 

The dtw method returns [minimum path cost, best path] where the best path is a List of (x,y) co-ordinates into the matrix. Larger x is further along sequence1, larger y is further along the other sequence (sequence 1 again for self similarity, or a different sequence 2).   

See also: SCMIRAudioFile, SCMIR


** Examples

** self similarity demo

a = FloatArray[0.05,0.1,0.5,0.8,1.2,1.4]; 

m = SCMIRSimilarityMatrix(1,a); // 1-dimensional data, stored in a

m.sequence1 //a
m.sequence2 //also a
m.self //1 = self similarity matrix
m.columns //size of a
m.rows	//also size of a
m.dimensions	//1

m.calculate(1,1); //create matrix of unit 1, metric 1 = Manhattan

m.matrix

m.plot(100); 

m.dtw	//should get back diagonal as cheapest path

** two sequences

a = [0.0,0.1,0.5,0.8,1.2,1.4]; 
b = [0.03,0.05,0.3,0.7,0.8,1.1,1.38,0.4,1.1]; 

// comparison
m = SCMIRSimilarityMatrix(1,a,b); //1 dimensional data, stored in a and b

// note how order swapped since first array should have largest size
m.sequence1 // converted to FloatArray internally 
m.sequence2 //converted to FloatArray internally 

m.calculate(1,1); //create matrix, won't be square since a and b are different lengths

m.matrix

m.matrix.plot //as linear array; order is d(a(0), b(0)), d(a(0, b(1))... d(a(1),b(0))...d(a(last),b(last))

m.plot(100) //built in matrix plotting, stretch factor of 10 here

m.dtw; //get best path and distance of the path

** use with SCMIRAudioFile

e = SCMIRAudioFile("/Applications/SuperCollider/SuperCollider3.4/sounds/a11wlk01.wav", [[MFCC, 13], [Chromagram, 12]]);

{ e.extractFeatures; }.fork; //wait for me to finish

m = e.similarityMatrix(1, 0);  //m is an SCMIRSimilarityMatrix object

m.matrix.size.sqrt // 184

m.plot(2) //built in matrix plotting, stretch factor of 10 here

a = m.dtw

m.plot(2,path:a)	//plot with best dtw path 

m.reducedcolumns
m.reducedrows

m.matrix.postcs

** comparison of two audio files

(
~files = ["/data/audio/mirdata/pixiesivebeentired.wav","/data/audio/mirdata/Yellow Submarine.wav"]; 

~audio = ~files.collect{|filename,i|	 
	
e = SCMIRAudioFile(filename, [MFCC,Loudness]);
	
e.extractFeatures();
		
};

m = ~audio[0].similarityMatrix(40,0,other:~audio[1]);
)

~audio[0].numfeatures
(~audio[0].numframes).div(40)
(~audio[1].numframes).div(40)

m.reducedcolumns //194
m.reducedrows	//172

d = m.dtw

m.plot(2,1, path:d)	//show path on the similarity matrix plot

** very minimal test

//SCMIR.setTempDir("/Users/nickcollins/Desktop/"); 

a = FloatArray[0.05,0.1,0.9]; 

m = SCMIRSimilarityMatrix(1,a); //1 dimensional data, stored in a

m.calculate(1,2); //create matrix

m.matrix

d = m.dtw	//should get back diagonal as cheapest path

m.plot(100,path:d)

//check alternative options in similaritymatrix2 external

a = FloatArray[0.05,0.1,0.9]; 

m = SCMIRSimilarityMatrix(1,a); //1 dimensional data, stored in a

m.calculate(1,2,0,0); //create matrix, max within segments rather than mean

m.matrix

d = m.dtw	//should get back diagonal as cheapest path

m.plot(100,path:d)

m.calculate(1,2,1,0); //create matrix, max within segments rather than mean, post calculate (make large similarity matrix then reduce)

m.matrix	//same results

d = m.dtw	//should get back diagonal as cheapest path

m.plot(100,path:d)

** check that post reduction also works on larger scale

e = SCMIRAudioFile("/Applications/SuperCollider/SuperCollider3.4/sounds/a11wlk01.wav", [[MFCC, 13], [Chromagram, 12]]);

e.extractFeatures();

m = e.similarityMatrix(2,0,1,0);  //m is an SCMIRSimilarityMatrix object

m.matrix.size.sqrt //92

m.plot(2) //built in matrix plotting, stretch factor of 10 here

a = m.dtw

m.plot(2,path:a)	//plot with best dtw path 
